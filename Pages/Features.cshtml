@page
@{
    ViewData["Title"] = "Features & Documentation - NewsSitePro";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="features-container">
    <!-- Page Header -->
    <div class="page-header">
        <h1><i class="fas fa-star"></i> Features & Documentation</h1>
        <p class="header-description">Explore the technical features and capabilities of NewsSitePro</p>
    </div>

    <!-- Tab Navigation -->
    <div class="tab-navigation">
        <button class="tab-btn active" data-target="architecture">
            <i class="fas fa-sitemap"></i>
            <span>Architecture</span>
        </button>
        <button class="tab-btn" data-target="autosync">
            <i class="fas fa-sync-alt"></i>
            <span>Auto Sync</span>
        </button>
        <button class="tab-btn" data-target="trending">
            <i class="fas fa-fire"></i>
            <span>Trending Topics</span>
        </button>
        <button class="tab-btn" data-target="googleauth">
            <i class="fab fa-google"></i>
            <span>Google Auth</span>
        </button>
    </div>

    <!-- Content Container -->
    <div class="content-container">
        <div id="content-frame">
            <!-- Content will be loaded here -->
        </div>
    </div>
</div>

<style>
.features-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1rem;
}

.page-header {
    text-align: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem;
    border-radius: 12px;
    margin-bottom: 2rem;
}

.page-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    font-weight: 600;
}

.page-header i {
    margin-right: 0.5rem;
}

.header-description {
    font-size: 1.1rem;
    opacity: 0.9;
    margin: 0;
}

.tab-navigation {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
}

.tab-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 1.5rem;
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    font-weight: 500;
    color: #6c757d;
    min-width: 120px;
}

.tab-btn:hover {
    border-color: #667eea;
    color: #667eea;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
}

.tab-btn.active {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-color: #667eea;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.25);
}

.tab-btn i {
    font-size: 1.5rem;
}

.content-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    min-height: 600px;
}

#content-frame {
    width: 100%;
    min-height: 600px;
    padding: 2rem;
    overflow-y: auto;
    max-height: 80vh;
}

.loading-state {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 400px;
    color: #6c757d;
    flex-direction: column;
    gap: 1rem;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive Design */
@@media (max-width: 768px) {
    .page-header {
        padding: 1.5rem;
    }

    .page-header h1 {
        font-size: 2rem;
    }

    .tab-navigation {
        gap: 0.5rem;
    }

    .tab-btn {
        padding: 0.75rem 1rem;
        min-width: 100px;
        font-size: 0.8rem;
    }

    .tab-btn i {
        font-size: 1.25rem;
    }

    #content-frame {
        padding: 1rem;
        max-height: 70vh;
    }
}

@@media (max-width: 576px) {
    .features-container {
        padding: 0.5rem;
    }

    .tab-navigation {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.5rem;
    }

    .tab-btn {
        padding: 0.75rem;
        min-width: auto;
    }
}

/* Styling for loaded content */
#content-frame h1, #content-frame h2, #content-frame h3 {
    color: #667eea;
}

#content-frame pre {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    overflow-x: auto;
}

#content-frame code {
    background: #f8f9fa;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    color: #e91e63;
}

#content-frame .highlight, #content-frame .success, #content-frame .warning {
    padding: 1rem;
    border-radius: 8px;
    margin: 1rem 0;
}

#content-frame .highlight {
    background: #e7f3ff;
    border-left: 4px solid #667eea;
}

#content-frame .success {
    background: #d4edda;
    border-left: 4px solid #28a745;
    color: #155724;
}

#content-frame .warning {
    background: #fff3cd;
    border-left: 4px solid #ffc107;
    color: #856404;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const contentFrame = document.getElementById('content-frame');
    
    // Content data - embedded directly to avoid CORS issues
    const contentData = {
        'architecture': `
            <h1>üèóÔ∏è NewsSitePro Architecture Overview</h1>
            <p>This section explains the technical architecture and design patterns used in NewsSitePro.</p>
            <h2>Key Components</h2>
            <ul>
                <li><strong>ASP.NET Core Razor Pages</strong> - Server-side rendering with dynamic content</li>
                <li><strong>SQL Server Database</strong> - Relational data storage with stored procedures</li>
                <li><strong>JWT Authentication</strong> - Secure token-based authentication</li>
                <li><strong>Context-Driven Architecture</strong> - Dynamic UI based on user context</li>
                <li><strong>Background Services</strong> - Automated news fetching and processing</li>
            </ul>
            <h2>Design Patterns</h2>
            <ul>
                <li>Repository Pattern for data access</li>
                <li>Dependency Injection for service management</li>
                <li>Factory Pattern for context creation</li>
                <li>Observer Pattern for real-time updates</li>
            </ul>
            <div class="highlight">
                <strong>Note:</strong> The architecture is designed for scalability and maintainability, allowing easy addition of new features and services.
            </div>
        `,
        'autosync': `
            <h1>ü§ñ Auto Sync Technology</h1>
            <p>Automated news aggregation system that keeps your content fresh and up-to-date.</p>
            <h2>How It Works</h2>
            <ol>
                <li><strong>Background Service</strong> - Runs every 24 hours automatically</li>
                <li><strong>News API Integration</strong> - Fetches from multiple news sources</li>
                <li><strong>Content Processing</strong> - Filters and validates articles</li>
                <li><strong>Database Storage</strong> - Saves articles with proper categorization</li>
            </ol>
            <h2>Features</h2>
            <ul>
                <li>Automatic categorization (Technology, Sports, Politics, etc.)</li>
                <li>Duplicate detection and filtering</li>
                <li>Image optimization and storage</li>
                <li>Source attribution and linking</li>
            </ul>
            <div class="success">
                <strong>‚úÖ Current Status:</strong> Auto sync is active and fetching 35+ articles daily from trusted news sources.
            </div>
            <h2>Admin Controls</h2>
            <p>Administrators can manually trigger sync, enable/disable the service, and monitor sync statistics through the admin panel.</p>
        `,
        'trending': `
            <h1>üî• Trending Topics System</h1>
            <p>Advanced algorithm that identifies and tracks trending topics based on user engagement.</p>
            <h2>Calculation Method</h2>
            <p>The trending algorithm uses weighted engagement metrics with time decay:</p>
            <ul>
                <li><strong>Likes:</strong> Weight = 3.0</li>
                <li><strong>Comments:</strong> Weight = 5.0</li>
                <li><strong>Views:</strong> Weight = 1.0</li>
                <li><strong>Time Decay:</strong> 0.9^hours (prioritizes recent activity)</li>
            </ul>
            <div class="highlight">
                <strong>Formula:</strong> TrendScore = (Likes √ó 3.0 + Comments √ó 5.0 + Views √ó 1.0) √ó TimeDecayFactor
            </div>
            <h2>Features</h2>
            <ul>
                <li>Real-time trend calculation</li>
                <li>Category-based trending</li>
                <li>Automatic cleanup of old trends</li>
                <li>API endpoints for third-party integration</li>
            </ul>
            <h2>Display Locations</h2>
            <p>Trending topics appear in:</p>
            <ul>
                <li>Right sidebar (top 5 trends)</li>
                <li>Dedicated trending page</li>
                <li>Search suggestions</li>
                <li>Category filters</li>
            </ul>
        `,
        'googleauth': `
            <h1>üîê Google OAuth Integration</h1>
            <p>Seamless authentication using Google accounts with secure token management.</p>
            <h2>Authentication Flow</h2>
            <ol>
                <li><strong>Authorization Request</strong> - User clicks "Login with Google"</li>
                <li><strong>User Consent</strong> - Google handles authentication</li>
                <li><strong>Token Exchange</strong> - Application receives access tokens</li>
                <li><strong>Profile Retrieval</strong> - User data is fetched from Google</li>
                <li><strong>Account Linking</strong> - User is created or linked in database</li>
                <li><strong>Session Creation</strong> - JWT token issued for app access</li>
            </ol>
            <h2>Security Features</h2>
            <ul>
                <li>OAuth 2.0 standard compliance</li>
                <li>Secure token storage and management</li>
                <li>Automatic session cleanup</li>
                <li>Refresh token handling</li>
            </ul>
            <div class="success">
                <strong>Benefits:</strong> Users can login quickly without creating additional passwords, improving security and user experience.
            </div>
            <h2>Admin Monitoring</h2>
            <p>Administrators can:</p>
            <ul>
                <li>View login statistics</li>
                <li>Monitor active sessions</li>
                <li>Track authentication success rates</li>
                <li>Manage user accounts</li>
            </ul>
        `
    };
    
    // Load content function
    function loadContent(contentKey) {
        try {
            // Show loading state briefly
            contentFrame.innerHTML = `
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <p>Loading content...</p>
                </div>
            `;
            
            // Simulate brief loading for better UX
            setTimeout(() => {
                contentFrame.innerHTML = contentData[contentKey] || '<p>Content not found.</p>';
            }, 300);
            
        } catch (error) {
            console.error('Error loading content:', error);
            contentFrame.innerHTML = `
                <div class="loading-state">
                    <i class="fas fa-exclamation-triangle" style="color: #dc3545; font-size: 2rem;"></i>
                    <p>Failed to load content. Please try again.</p>
                </div>
            `;
        }
    }
    
    // Tab click handlers
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Update active state
            tabButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Load content
            const target = this.getAttribute('data-target');
            loadContent(target);
        });
    });
    
    // Load default content (architecture)
    loadContent('architecture');
});
</script>

@*
    Post.cshtml - Modern post display page using enhanced ViewComponent system
    Shows individual posts with comments when ID provided, or feed view when no ID
    Integrates with the same ViewComponent system as Index page for consistency
*@
@page "/Post/{id:int?}"
@model NewsSite.Pages.PostModel
@using NewsSite.BL
@using NewsSitePro.Models
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = Model.PostData?.Title ?? "News Feed";
    ViewData["HeaderData"] = Model.HeaderData;
}

@section Styles {
    <link rel="stylesheet" href="~/css/post-card.css" />
    <link rel="stylesheet" href="~/css/comments.css" />
}

<!-- Debug Information -->
@if (ViewData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @ViewData["ErrorMessage"]
    </div>
}

@if (Model.IsIndividualPost && Model.PostData != null)
{
    <!-- Individual Post View -->
    <div class="individual-post-container">
        <!-- Back Navigation -->
        <div class="back-navigation">
            <button onclick="window.history.back()" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back
            </button>
        </div>

        <!-- Post Content using Enhanced ViewComponent System -->
        @{
            // Create follow status map for the post author
            var followStatusMap = new Dictionary<int, bool>();
            if (ViewData["IsFollowing_" + Model.PostData.UserID] is bool isFollowing)
            {
                followStatusMap[Model.PostData.UserID] = isFollowing;
            }
            
            var individualContext = PostContextFactory.CreateIndividualContext(Model.HeaderData?.user, Model.PostData, followStatusMap);
            // Pass comments to ViewData for the ViewComponent
            ViewData["Comments"] = Model.Comments;
        }
        
        @await Component.InvokeAsync("PostCard", new PostCardViewModel 
        { 
            Post = Model.PostData, 
            Context = individualContext,
            CurrentUser = Model.HeaderData?.user
        })
    </div>
}
else
{
    <!-- Feed View - Uses same system as Index page -->
    <div class="home-container">
        <!-- Feed Controls -->
        <div class="feed-header">
            <h2>News Feed</h2>
            <div class="feed-controls">
                <div class="feed-tabs">
                    <button class="feed-tab active" data-filter="all">All</button>
                    <button class="feed-tab" data-filter="following">Following</button>
                    <button class="feed-tab" data-filter="trending">Trending</button>
                    <button class="feed-tab" data-filter="saved">Saved</button>
                </div>
                <button id="refreshBtn" class="btn btn-outline-primary" onclick="refreshFeed()">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>
        </div>

        <!-- Feed Container -->
        <div class="feed-container" id="feedContainer">
            <!-- Posts will be loaded dynamically -->
        </div>

        <!-- Loading State -->
        <div class="loading-state" id="loadingState" style="display: none;">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading posts...</p>
        </div>

        <!-- Load More Button -->
        <div class="load-more-container" id="loadMoreContainer" style="display: none;">
            <button id="loadMoreBtn" class="btn btn-outline-primary btn-load-more">
                <i class="fas fa-plus"></i> Load More Posts
            </button>
        </div>

        <!-- Empty State -->
        <div id="emptyState" class="empty-state" style="display: none;">
            <i class="fas fa-newspaper"></i>
            <h3>No posts available</h3>
            <p>Check back later for new content!</p>
        </div>
    </div>
}

<!-- Toast Container -->
<div class="toast-container"></div>

@section Scripts {
    <script src="~/js/post-interactions.js"></script>
    <!-- comments.js is already loaded in _Layout.cshtml -->
    
    @if (!Model.IsIndividualPost)
    {
        <!-- Feed Scripts -->
        <script>
            let currentPage = 1;
            let isLoading = false;
            let currentFilter = 'all';
            let hasMorePosts = true;

            // Load posts using the same API as Index page
            async function loadPosts(reset = false) {
                if (isLoading || (!hasMorePosts && !reset)) return;
                
                isLoading = true;
                document.getElementById('loadingState').style.display = 'block';
                
                if (reset) {
                    currentPage = 1;
                    hasMorePosts = true;
                    document.getElementById('feedContainer').innerHTML = '';
                }
                
                try {
                    const response = await fetch(`/api/News/posts/rendered?page=${currentPage}&limit=10&feed=${currentFilter}`);
                    
                    if (response.ok) {
                        const html = await response.text();
                        
                        if (reset) {
                            document.getElementById('feedContainer').innerHTML = html;
                        } else {
                            document.getElementById('feedContainer').insertAdjacentHTML('beforeend', html);
                        }
                        
                        // Check if we have more posts
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        const newPosts = tempDiv.querySelectorAll('.post-card');
                        
                        if (newPosts.length < 10) {
                            hasMorePosts = false;
                            document.getElementById('loadMoreContainer').style.display = 'none';
                        } else {
                            document.getElementById('loadMoreContainer').style.display = 'block';
                        }
                        
                        currentPage++;
                        
                        if (newPosts.length === 0 && currentPage === 2) {
                            document.getElementById('emptyState').style.display = 'block';
                        } else {
                            document.getElementById('emptyState').style.display = 'none';
                        }
                    } else {
                        console.error('Failed to load posts');
                    }
                } catch (error) {
                    console.error('Error loading posts:', error);
                } finally {
                    isLoading = false;
                    document.getElementById('loadingState').style.display = 'none';
                }
            }

            // Filter tabs functionality
            document.addEventListener('DOMContentLoaded', function() {
                // Set up filter tabs
                document.querySelectorAll('.feed-tab').forEach(tab => {
                    tab.addEventListener('click', function() {
                        document.querySelectorAll('.feed-tab').forEach(t => t.classList.remove('active'));
                        this.classList.add('active');
                        currentFilter = this.dataset.filter;
                        loadPosts(true);
                    });
                });

                // Load more button
                document.getElementById('loadMoreBtn').addEventListener('click', function() {
                    loadPosts();
                });

                // Initial load
                loadPosts(true);
            });

            // Refresh feed
            function refreshFeed() {
                loadPosts(true);
            }
        </script>
    }
    else
    {
        <!-- Individual Post Scripts -->
        <script>
            // Initialize comments manager for individual post
            document.addEventListener('DOMContentLoaded', function() {
                if (window.commentsManager) {
                    window.commentsManager.init();
                    window.commentsManager.loadCommentsForCurrentPost();
                }
            });
        </script>
    }
}

<style>
/* Individual Post Styles */
.individual-post-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
}

.back-navigation {
    margin-bottom: 2rem;
}

.back-navigation .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

/* Feed Styles */
.home-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
}

.feed-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e9ecef;
}

.feed-header h2 {
    margin: 0;
    color: #2c3e50;
}

.feed-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.feed-tabs {
    display: flex;
    gap: 0.5rem;
}

.feed-tab {
    padding: 0.5rem 1rem;
    border: 1px solid #e9ecef;
    background: white;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.875rem;
}

.feed-tab:hover,
.feed-tab.active {
    background: #007bff;
    color: white;
    border-color: #007bff;
}

.loading-state {
    text-align: center;
    padding: 2rem;
}

.posts-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.load-more-container {
    text-align: center;
    margin-top: 2rem;
}

.btn-load-more {
    padding: 0.75rem 2rem;
    border-radius: 25px;
}

.empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: #6c757d;
}

.empty-state i {
    font-size: 4rem;
    margin-bottom: 1rem;
    color: #dee2e6;
}

.empty-state h3 {
    margin-bottom: 0.5rem;
    color: #495057;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .feed-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
    
    .feed-controls {
        flex-direction: column;
        width: 100%;
    }
    
    .feed-tabs {
        justify-content: center;
    }
}
</style>

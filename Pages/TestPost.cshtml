@page "/TestPost"
@model NewsSite.Pages.TestPostModel
@using NewsSite.BL
@using NewsSitePro.Models
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = "Test Post Display";
    ViewData["HeaderData"] = Model.HeaderData;
}

@section Styles {
    <link rel="stylesheet" href="~/css/post-card.css" />
    <link rel="stylesheet" href="~/css/comments.css" />
    <link rel="stylesheet" href="~/css/mobile-responsive.css" />
}

<div class="container mt-4">
    <h2>Test Post Display - Post ID: 50</h2>
    
    @if (Model.PostData != null)
    {
        <div class="test-post-container">
            <!-- Debug Information -->
            <div class="alert alert-info mb-3">
                <h5>Debug Info:</h5>
                <ul class="mb-0">
                    <li><strong>Post ID:</strong> @Model.PostData.ArticleID</li>
                    <li><strong>Post Title:</strong> @Model.PostData.Title</li>
                    <li><strong>Post Author:</strong> @Model.PostData.Username</li>
                    <li><strong>Current User:</strong> @(Model.HeaderData?.user?.Name ?? "Not logged in")</li>
                    <li><strong>Is Authenticated:</strong> @(ViewData["IsAuthenticated"] ?? "false")</li>
                    <li><strong>User ID:</strong> @(ViewData["CurrentUserId"] ?? "null")</li>
                    <li><strong>User Name:</strong> @(ViewData["CurrentUserName"] ?? "null")</li>
                    <li><strong>Comments Count:</strong> @Model.Comments.Count</li>
                </ul>
            </div>

            <!-- Context Selection Dropdown -->
            <div class="alert alert-warning mb-3">
                <h5>üéõÔ∏è Context Testing Panel:</h5>
                <div class="row">
                    <div class="col-md-6">
                        <label for="contextSelector" class="form-label"><strong>Display Context:</strong></label>
                        <select id="contextSelector" class="form-select" onchange="changePostContext()">
                            <option value="feed" selected>Feed Context (Index Page)</option>
                            <option value="individual">Individual Context (Post Page)</option>
                            <option value="profile">Profile Context (Profile Page)</option>
                            <option value="admin">Admin Context (Admin Panel)</option>
                            <option value="compact">Compact Context (Sidebar)</option>
                            <option value="search">Search Context (Search Results)</option>
                            <option value="trending">Trending Context (Trending Page)</option>
                            <option value="saved">Saved Context (Saved Posts)</option>
                            <option value="mobile">Mobile Context (Mobile View)</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="featureToggles" class="form-label"><strong>Feature Overrides:</strong></label>
                        <div class="form-check-group">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="showComments" onchange="updatePostDisplay()">
                                <label class="form-check-label" for="showComments">Comments</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="showFullContent" onchange="updatePostDisplay()">
                                <label class="form-check-label" for="showFullContent">Full Content</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="showFollowBtn" onchange="updatePostDisplay()">
                                <label class="form-check-label" for="showFollowBtn">Follow Button</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-2">
                    <small class="text-muted">
                        <i class="fas fa-info-circle"></i> 
                        Change context to see how the same post renders differently across various pages
                    </small>
                </div>
            </div>

            <!-- Enhanced Post Display -->
            @{
                // Use the SAME context as Index page for consistency
                var feedContext = PostContextFactory.CreateFeedContext(Model.HeaderData?.user, Model.PostData, "all");
                
                // Enhanced context with all features for testing (same as Index page)
                feedContext.ShowFollowButton = Model.HeaderData?.user != null && Model.HeaderData.user.Id != Model.PostData.UserID;
                feedContext.EnableInteractions = true;
                feedContext.ShowLikeButton = true;
                feedContext.ShowCommentButton = true;
                feedContext.ShowSaveButton = true;
                feedContext.ShowShareButton = true;
                feedContext.CanReport = Model.HeaderData?.user != null && Model.HeaderData.user.Id != Model.PostData.UserID;
                feedContext.CanBlock = Model.HeaderData?.user != null && Model.HeaderData.user.Id != Model.PostData.UserID;
                feedContext.ShowStats = true;
                feedContext.ShowAuthorInfo = true;
                feedContext.ShowCategory = true;
                feedContext.ShowSource = true;
                feedContext.ShowComments = false; // Keep same as feed (no comments section)
                feedContext.ShowFullContent = false; // Keep same as feed (preview content)
            }
            
            <div class="post-display-test">
                <h4>PostCard ViewComponent with Full Features:</h4>
                @await Component.InvokeAsync("PostCard", new PostCardViewModel 
                { 
                    Post = Model.PostData, 
                    Context = feedContext,
                    CurrentUser = Model.HeaderData?.user,
                    Comments = Model.Comments
                })
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger">
            <h4>Error Loading Post</h4>
            <p>Could not load post with ID 50. Please check if the post exists in the database.</p>
            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <p><strong>Error:</strong> @Model.ErrorMessage</p>
            }
        </div>
    }
</div>
</div>

@section Scripts {
    <script src="~/js/posts.js"></script>
    <!-- comments.js is already loaded in _Layout.cshtml -->
    <script>
        // Mobile menu functions
        function toggleMobileMenu(postId) {
            console.log('toggleMobileMenu called for post:', postId);
            const menu = document.getElementById(`mobileMenu-${postId}`);
            console.log('Found menu element:', menu);
            if (menu) {
                menu.classList.toggle('show');
                console.log('Menu classes after toggle:', menu.className);
                // Close other open menus
                document.querySelectorAll('.mobile-menu-dropdown.show').forEach(otherMenu => {
                    if (otherMenu.id !== `mobileMenu-${postId}`) {
                        otherMenu.classList.remove('show');
                    }
                });
            } else {
                console.error('Mobile menu not found for post:', postId);
            }
        }
        
        function hideMobileMenu(postId) {
            const menu = document.getElementById(`mobileMenu-${postId}`);
            if (menu) {
                menu.classList.remove('show');
            }
        }
        
        // Close mobile menus when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.mobile-post-menu')) {
                document.querySelectorAll('.mobile-menu-dropdown.show').forEach(menu => {
                    menu.classList.remove('show');
                });
            }
        });
        
        // Fallback functions for all post interactions
        if (typeof openPost === 'undefined') {
            window.openPost = function(postId) {
                window.location.href = window.ApiConfig.getApiUrl(`/Post?id=${postId}`);
            };
        }
        
        // Helper function to get JWT token
        function getJwtToken() {
            // Try localStorage first
            let token = localStorage.getItem('jwtToken');
            if (token) return token;
            
            // Try cookie
            const match = document.cookie.match(/jwtToken=([^;]+)/);
            if (match) return match[1];
            
            return null;
        }

        if (typeof addComment === 'undefined') {
            window.addComment = function(postId) {
                const content = document.getElementById('commentContent');
                if (!content || !content.value.trim()) {
                    alert('Please enter a comment');
                    return;
                }
                
                const token = getJwtToken();
                if (!token) {
                    alert('Please log in to add comments');
                    return;
                }
                
                // Make API call to add comment
                fetch(window.ApiConfig.getApiUrl('/api/Comments'), {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        PostID: postId,
                        Content: content.value,
                        ParentCommentID: null
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        content.value = ''; // Clear the form
                        location.reload(); // Reload to show new comment
                    } else {
                        alert('Error adding comment: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error adding comment: ' + error.message);
                });
            };
        }
        
        if (typeof toggleLike === 'undefined') {
            window.toggleLike = function(postId, element) {
                // Fallback implementation for testing - no actual API call
                console.log('toggleLike called for post:', postId);
                element.classList.toggle('active');
                const icon = element.querySelector('i');
                const span = element.querySelector('span');
                const likesCount = element.closest('.post-actions').querySelector('.likes-count');
                
                if (element.classList.contains('active')) {
                    span.textContent = 'Liked';
                    if (likesCount) likesCount.textContent = parseInt(likesCount.textContent) + 1;
                    console.log('Post liked');
                } else {
                    span.textContent = 'Like';
                    if (likesCount) likesCount.textContent = parseInt(likesCount.textContent) - 1;
                    console.log('Post unliked');
                }
            };
        }
        
        if (typeof toggleSave === 'undefined') {
            window.toggleSave = function(postId, element) {
                // Fallback implementation for testing - no actual API call
                console.log('toggleSave called for post:', postId);
                element.classList.toggle('active');
                const span = element.querySelector('span');
                if (element.classList.contains('active')) {
                    span.textContent = 'Saved';
                    console.log('Post saved');
                } else {
                    span.textContent = 'Save';
                    console.log('Post unsaved');
                }
            };
        }
        
        if (typeof followUser === 'undefined') {
            window.followUser = function(userId, username, element) {
                // Fallback implementation for testing - no actual API call
                console.log('followUser called for user:', userId, username);
                element.classList.toggle('following');
                const icon = element.querySelector('i');
                const span = element.querySelector('span');
                if (element.classList.contains('following')) {
                    icon.className = 'fas fa-user-check';
                    span.textContent = 'Following';
                    console.log('Now following:', username);
                } else {
                    icon.className = 'fas fa-user-plus';
                    span.textContent = 'Follow';
                    console.log('Unfollowed:', username);
                }
            };
        }
        
        // Add default implementations for other functions
        if (typeof sharePost === 'undefined') {
            window.sharePost = function(postId) {
                if (navigator.share) {
                    navigator.share({
                        title: document.querySelector('.post-title').textContent,
                        url: window.ApiConfig.getApiUrl(`/Post?id=${postId}`)
                    });
                } else {
                    // Fallback: copy to clipboard
                    const url = window.ApiConfig.getApiUrl(`/Post?id=${postId}`);
                    navigator.clipboard.writeText(url).then(() => {
                        alert('Post URL copied to clipboard!');
                    });
                }
            };
        }
        
        if (typeof editPost === 'undefined') {
            window.editPost = function(postId) {
                window.location.href = window.ApiConfig.getApiUrl(`/EditPost?id=${postId}`);
            };
        }
        
        if (typeof deletePost === 'undefined') {
            window.deletePost = function(postId) {
                if (confirm('Are you sure you want to delete this post?')) {
                    alert('Delete functionality would be implemented here');
                }
            };
        }
        
        if (typeof reportPost === 'undefined') {
            window.reportPost = function(postId) {
                alert('Report functionality would be implemented here');
            };
        }
        
        if (typeof blockUser === 'undefined') {
            window.blockUser = function(userId, username) {
                if (confirm(`Are you sure you want to block ${username}?`)) {
                    alert('Block functionality would be implemented here');
                }
            };
        }
        
        // Debug function to check what functions are available
        function checkJavaScriptFunctions() {
            const functions = ['openPost', 'toggleLike', 'sharePost', 'addComment', 'followUser'];
            console.log('JavaScript Functions Available:');
            functions.forEach(func => {
                if (typeof window[func] === 'function') {
                    console.log(`‚úì ${func} is available`);
                } else {
                    console.warn(`‚úó ${func} is NOT available`);
                }
            });
        }
        
        // Call debug function when page loads
        document.addEventListener('DOMContentLoaded', function() {
            checkJavaScriptFunctions();
            
            // Debug mobile menu elements
            console.log('=== Mobile Menu Debug ===');
            const mobileMenus = document.querySelectorAll('.mobile-post-menu');
            console.log('Found mobile menus:', mobileMenus.length);
            
            const mobileToggles = document.querySelectorAll('.mobile-menu-toggle');
            console.log('Found mobile toggles:', mobileToggles.length);
            
            const mobileDropdowns = document.querySelectorAll('.mobile-menu-dropdown');
            console.log('Found mobile dropdowns:', mobileDropdowns.length);
            
            mobileDropdowns.forEach((dropdown, index) => {
                console.log(`Dropdown ${index} ID:`, dropdown.id);
                console.log(`Dropdown ${index} display style:`, window.getComputedStyle(dropdown).display);
            });
        });
        
        // Context switching functionality
        async function changePostContext() {
            const contextSelector = document.getElementById('contextSelector');
            const selectedContext = contextSelector.value;
            
            console.log('Changing context to:', selectedContext);
            
            // Update feature toggles based on context
            updateFeatureTogglesForContext(selectedContext);
            
            // Reload the post with new context
            await reloadPostWithContext(selectedContext);
        }
        
        function updateFeatureTogglesForContext(contextType) {
            const showComments = document.getElementById('showComments');
            const showFullContent = document.getElementById('showFullContent');
            const showFollowBtn = document.getElementById('showFollowBtn');
            
            // Reset all checkboxes
            showComments.checked = false;
            showFullContent.checked = false;
            showFollowBtn.checked = false;
            
            // Set defaults based on context
            switch(contextType) {
                case 'feed':
                    showFollowBtn.checked = true;
                    break;
                case 'individual':
                    showComments.checked = true;
                    showFullContent.checked = true;
                    showFollowBtn.checked = true;
                    break;
                case 'profile':
                    showFollowBtn.checked = false; // Don't show on profile
                    break;
                case 'admin':
                    showFollowBtn.checked = false;
                    break;
                case 'compact':
                    // Minimal display
                    break;
                case 'search':
                    showFollowBtn.checked = true;
                    break;
                case 'trending':
                    showFollowBtn.checked = true;
                    break;
                case 'saved':
                    showFollowBtn.checked = true;
                    break;
                case 'mobile':
                    showFollowBtn.checked = true;
                    break;
            }
        }
        
        async function reloadPostWithContext(contextType) {
            const postContainer = document.querySelector('.post-display-test');
            
            // Show loading state
            postContainer.innerHTML = `
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading ${contextType} context...</p>
                </div>
            `;
            
            try {
                // Get feature overrides
                const showComments = document.getElementById('showComments').checked;
                const showFullContent = document.getElementById('showFullContent').checked;
                const showFollowBtn = document.getElementById('showFollowBtn').checked;
                
                // Make API call to get new context rendering
                const response = await fetch(window.ApiConfig.getApiUrl('/api/Debug/TestPost/Context'), {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        postId: 50,
                        contextType: contextType,
                        showComments: showComments,
                        showFullContent: showFullContent,
                        showFollowButton: showFollowBtn
                    })
                });
                
                if (response.ok) {
                    const html = await response.text();
                    postContainer.innerHTML = `
                        <h4>PostCard ViewComponent - ${contextType.charAt(0).toUpperCase() + contextType.slice(1)} Context:</h4>
                        ${html}
                    `;
                    
                    // Re-initialize JavaScript functions for new content
                    initializePostInteractions();
                } else {
                    throw new Error('Failed to load context');
                }
            } catch (error) {
                console.error('Error loading context:', error);
                postContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <h5>Error Loading Context</h5>
                        <p>Could not load ${contextType} context. Using client-side fallback.</p>
                        <button class="btn btn-outline-primary" onclick="location.reload()">Reload Page</button>
                    </div>
                `;
            }
        }
        
        function updatePostDisplay() {
            // When feature toggles change, reload with current context
            const contextSelector = document.getElementById('contextSelector');
            const selectedContext = contextSelector.value;
            reloadPostWithContext(selectedContext);
        }
        
        function initializePostInteractions() {
            // Re-run the debug function for the new content
            checkJavaScriptFunctions();
            
            // Re-initialize mobile menu debug
            console.log('=== Post Content Reloaded ===');
            const mobileMenus = document.querySelectorAll('.mobile-post-menu');
            console.log('Mobile menus after reload:', mobileMenus.length);
        }
    </script>
}

<style>
.test-post-container {
    max-width: 800px;
    margin: 0 auto;
}

.post-display-test {
    margin: 2rem auto;
    padding: 2rem;
    border: 2px solid #007bff;
    border-radius: 12px;
    background-color: #f8f9fa;
    max-width: 800px;
    box-shadow: 0 4px 6px rgba(0, 123, 255, 0.1);
    width: 100%;
    box-sizing: border-box;
    overflow: hidden;
}

.post-display-test .post-card {
    margin: 0 !important;
    box-shadow: none !important;
    border: none !important;
    background: white !important;
    border-radius: 8px !important;
    overflow: hidden;
    width: 100%;
    box-sizing: border-box;
}

/* Ensure post content stays within bounds */
.post-display-test .post-content {
    word-wrap: break-word;
    overflow-wrap: break-word;
    max-width: 100%;
    overflow: hidden;
}

.post-display-test .post-image img {
    max-width: 100%;
    height: auto;
    object-fit: cover;
}

.post-display-test .post-text {
    max-width: 100%;
    word-break: break-word;
    overflow: hidden;
}

.post-display-test h4 {
    margin-bottom: 1rem;
    color: #007bff;
    font-weight: 600;
}



.alert-info {
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
}

/* Ensure mobile menu is always visible for testing */
.mobile-post-menu {
    display: block !important;
    position: relative;
}

.mobile-menu-toggle {
    background: none;
    border: 1px solid #dee2e6;
    padding: 0.5rem;
    border-radius: 6px;
    color: #6c757d;
    cursor: pointer;
    font-size: 1.25rem;
    transition: all 0.3s ease;
}

.mobile-menu-toggle:hover {
    background: #f8f9fa;
    color: #007bff;
    border-color: #007bff;
}

.mobile-menu-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    min-width: 180px;
    z-index: 1000;
    display: none;
    overflow: hidden;
}

.mobile-menu-dropdown.show {
    display: block !important;
    animation: slideDown 0.2s ease-out;
}

@@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.mobile-menu-dropdown .action-btn {
    width: 100%;
    text-align: left;
    padding: 0.75rem 1rem;
    border-radius: 0;
    justify-content: flex-start;
    gap: 0.75rem;
    border-bottom: 1px solid #f8f9fa;
    background: none;
    border-left: none;
    border-right: none;
    border-top: none;
}

.mobile-menu-dropdown .action-btn:last-child {
    border-bottom: none;
}

.mobile-menu-dropdown .action-btn:hover {
    background: #f8f9fa;
}

/* Force show mobile menu for testing on all screen sizes */
@@media (max-width: 9999px) {
    .mobile-post-menu {
        display: block !important;
    }
}

/* Responsive design */
@@media (max-width: 768px) {
    .post-display-test {
        margin: 1rem;
        padding: 1rem;
        max-width: none;
    }
}
</style>

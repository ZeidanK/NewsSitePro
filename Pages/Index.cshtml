@page
@model IndexModel
@using NewsSitePro.Models
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["HeaderData"] = Model.HeaderData;
    ViewData["Title"] = "Home - NewsSitePro";
}

<link rel="stylesheet" href="~/css/post-card.css" />

<div class="home-container"> 
    <!-- Feed Container -->
    <div class="feed-container">
        <div class="feed-header">
            <h2>Latest News</h2>
            <div class="feed-controls">
                <button class="feed-tab active" data-feed="all">All</button>
                <button class="feed-tab" data-feed="following">Following</button>
                <button class="feed-tab" data-feed="trending">Trending</button>
            </div>
        </div>

        <!-- Loading State -->
        <div id="loading" class="loading-state">
            <i class="fas fa-spinner fa-spin"></i> Loading posts...
        </div>

        <!-- Posts Container -->
        <div id="postsContainer" class="posts-container">
            <!-- Initial posts will be loaded here -->
            @if (Model.Posts != null && Model.Posts.Any())
            {
                @foreach (var post in Model.Posts)
                {
                    @await Component.InvokeAsync("PostCard", new PostCardViewModel 
                    { 
                        Post = post, 
                        Context = PostContextFactory.CreateFeedContext(Model.HeaderData?.user, post, "all"),
                        CurrentUser = Model.HeaderData?.user
                    })
                }
            }
        </div>

        <!-- Load More Button -->
        <div class="load-more-container" style="display: none;">
            <button id="loadMoreBtn" class="btn btn-outline-primary btn-load-more">
                <i class="fas fa-plus"></i> Load More Posts
            </button>
        </div>

        <!-- Empty State -->
        <div id="emptyState" class="empty-state" style="display: none;">
            <i class="fas fa-newspaper"></i>
            <h3>No posts available</h3>
            <p>Be the first to share some news!</p>
            <a href="/Post" class="btn btn-primary">
                <i class="fas fa-plus"></i> Create Post
            </a>
        </div>
    </div>
</div>

@section Scripts {
<script src="~/js/post-interactions.js"></script>
<script>
    let currentPage = 2; // Start at 2 since page 1 is already loaded server-side
    let currentFeed = 'all';
    let isLoading = false;
    let hasMorePosts = true;

    document.addEventListener('DOMContentLoaded', function() {
        initializeFeed();
        setupFeedTabs();
        setupLoadMore();
    });

    function initializeFeed() {
        // Check if we have initial posts
        const postsContainer = document.getElementById('postsContainer');
        const hasInitialPosts = postsContainer.children.length > 0;
        
        if (hasInitialPosts) {
            document.getElementById('loading').style.display = 'none';
            document.querySelector('.load-more-container').style.display = 'block';
        } else {
            loadPosts(1, true);
        }
    }

    function setupFeedTabs() {
        document.querySelectorAll('.feed-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                const feedType = this.dataset.feed;
                if (feedType !== currentFeed) {
                    // Update active tab
                    document.querySelectorAll('.feed-tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Reset and load new feed
                    currentFeed = feedType;
                    currentPage = 1;
                    hasMorePosts = true;
                    loadPosts(1, true);
                }
            });
        });
    }

    function setupLoadMore() {
        document.getElementById('loadMoreBtn').addEventListener('click', function() {
            if (!isLoading && hasMorePosts) {
                loadPosts(currentPage, false);
            }
        });
    }

    async function loadPosts(page = 1, replace = false) {
        if (isLoading) return;
        
        isLoading = true;
        const loading = document.getElementById('loading');
        const container = document.getElementById('postsContainer');
        const loadMoreContainer = document.querySelector('.load-more-container');
        const emptyState = document.getElementById('emptyState');

        // Show loading state
        if (replace) {
            loading.style.display = 'block';
            container.innerHTML = '';
            loadMoreContainer.style.display = 'none';
            emptyState.style.display = 'none';
        } else {
            document.getElementById('loadMoreBtn').innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
        }

        try {
            // Fetch server-rendered HTML from ViewComponent endpoint
            const response = await fetch(`/api/news/posts/rendered?page=${page}&limit=10&feed=${currentFeed}`);
            
            if (response.ok) {
                const htmlContent = await response.text();
                
                if (replace) {
                    container.innerHTML = htmlContent;
                } else {
                    container.insertAdjacentHTML('beforeend', htmlContent);
                }

                // Check if we got any content
                const newPosts = container.querySelectorAll('.post-card');
                const postsOnThisPage = replace ? newPosts.length : newPosts.length - (page - 1) * 10;
                
                if (postsOnThisPage === 0) {
                    if (replace) {
                        emptyState.style.display = 'block';
                    } else {
                        hasMorePosts = false;
                        loadMoreContainer.style.display = 'none';
                    }
                } else {
                    currentPage = page + 1;
                    hasMorePosts = postsOnThisPage === 10; // If we got less than 10, no more posts
                    
                    if (hasMorePosts) {
                        loadMoreContainer.style.display = 'block';
                    } else {
                        loadMoreContainer.style.display = 'none';
                    }
                }
            } else {
                showError('Failed to load posts. Please try again.');
            }
        } catch (error) {
            console.error('Error loading posts:', error);
            showError('An error occurred while loading posts.');
        } finally {
            isLoading = false;
            loading.style.display = 'none';
            document.getElementById('loadMoreBtn').innerHTML = '<i class="fas fa-plus"></i> Load More Posts';
        }
    }

    function showError(message) {
        PostCardInteractions.showMessage(message, 'error');
    }
</script>
}

<style>
.home-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
}

.feed-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #e9ecef;
}

.feed-header h2 {
    margin: 0;
    color: #2c3e50;
}

.feed-controls {
    display: flex;
    gap: 0.5rem;
}

.feed-tab {
    background: none;
    border: 2px solid #dee2e6;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    color: #6c757d;
    cursor: pointer;
    transition: all 0.3s ease;
}

.feed-tab:hover,
.feed-tab.active {
    background: #007bff;
    border-color: #007bff;
    color: white;
}

.loading-state {
    text-align: center;
    padding: 2rem;
    color: #6c757d;
}

.posts-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.post-card {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 1.5rem;
    transition: box-shadow 0.3s ease;
}

.post-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.post-user-info .user-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    text-decoration: none;
    color: inherit;
}

.post-user-info .user-link:hover .username {
    color: #007bff;
}

.post-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
}

.post-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
}

.user-details {
    display: flex;
    flex-direction: column;
}

.username {
    font-weight: 600;
    color: #2c3e50;
}

.post-date {
    font-size: 0.875rem;
    color: #6c757d;
}

.category-badge {
    background: #007bff;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
}

.post-content {
    cursor: pointer;
    margin-bottom: 1rem;
}

.post-content:hover .post-title {
    color: #007bff;
}

.post-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 0.75rem 0;
    color: #2c3e50;
    transition: color 0.3s ease;
}

.post-image {
    margin: 0.75rem 0;
    border-radius: 8px;
    overflow: hidden;
}

.post-image img {
    width: 100%;
    height: 250px;
    object-fit: cover;
}

.post-text {
    color: #555;
    line-height: 1.6;
    margin: 0 0 0.75rem 0;
}

.post-source {
    padding: 0.5rem;
    background: rgba(0, 123, 255, 0.1);
    border-radius: 6px;
    font-size: 0.875rem;
}

.post-source i {
    color: #007bff;
    margin-right: 0.5rem;
}

.post-source a {
    color: #007bff;
    text-decoration: none;
}

.post-source a:hover {
    text-decoration: underline;
}

.post-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 1rem;
    border-top: 1px solid #e9ecef;
}

.post-stats {
    display: flex;
    gap: 1rem;
}

.post-stats .stat {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: #6c757d;
    font-size: 0.875rem;
}

.post-stats .stat i.liked {
    color: #e74c3c;
}

.post-buttons {
    display: flex;
    gap: 0.5rem;
}

.action-btn {
    background: none;
    border: none;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    color: #6c757d;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.875rem;
}

.action-btn:hover {
    background: #f8f9fa;
    color: #007bff;
}

.action-btn.active {
    color: #007bff;
}

.like-btn.active {
    color: #e74c3c;
}

.save-btn.active {
    color: #28a745;
}

.load-more-container {
    text-align: center;
    margin-top: 2rem;
}

.btn-load-more {
    padding: 0.75rem 2rem;
    border-radius: 25px;
}

.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: #6c757d;
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: #dee2e6;
}

.empty-state h3 {
    margin-bottom: 0.5rem;
}

@@media (max-width: 768px) {
    .home-container {
        padding: 0.5rem;
    }
    
    .feed-header {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }
    
    .feed-controls {
        justify-content: center;
    }
    
    .post-actions {
        flex-direction: column;
        gap: 1rem;
    }
    
    .post-buttons {
        justify-content: space-around;
    }
}
</style>
@page "/userprofile/{userId:int?}"
@model NewsSite.Pages.UserProfileModel
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = $"{Model.UserProfile?.Username ?? "User"}'s Profile";
    ViewData["HeaderData"] = Model.HeaderData;
}

@{
    // Include unified post template system
    await Html.RenderPartialAsync("_PostTemplatePartial");
}

@if (ViewData["ErrorMessage"] != null)
{
    <div class="container mt-4">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">
                <i class="fas fa-exclamation-triangle"></i>
                Error
            </h4>
            <p>@ViewData["ErrorMessage"]</p>
            @if (ViewData["ExceptionMessage"] != null)
            {
                <hr>
                <p class="mb-0 small text-muted">
                    <strong>Technical details:</strong> @ViewData["ExceptionMessage"]
                </p>
            }
            <hr>
            <div class="d-flex gap-2">
                <a href="~/" class="btn btn-primary">
                    <i class="fas fa-home"></i> Go Home
                </a>
                <button onclick="window.history.back()" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Go Back
                </button>
            </div>
        </div>
    </div>
}
else
{

<div class="user-profile-container">
    <div class="profile-header">
        <div class="user-avatar">
            <div class="avatar-circle">
                @if (!string.IsNullOrEmpty(Model.UserProfile?.ProfilePicture))
                {
                    <img src="@Model.UserProfile.ProfilePicture" alt="Profile Picture" class="profile-pic-img" style="width:120px;height:120px;border-radius:50%;object-fit:cover;" />
                }
                else
                {
                    <i class="fas fa-user"></i>
                }
            </div>
            @* Only show upload if this is the logged-in user's profile *@
                @if (User.Identity?.IsAuthenticated == true && Model.UserProfile?.UserID == int.Parse(User.FindFirst("userId")?.Value ?? "0"))
            {
                <form id="profilePicForm" enctype="multipart/form-data">
                    <input type="file" id="profilePicInput" name="file" accept="image/*" style="margin-top:10px;" />
                    <button type="button" id="uploadPicBtn" class="btn btn-sm btn-primary" style="margin-top:5px;">Upload</button>
                    <div id="profilePicPreview" style="margin-top:10px;"></div>
                </form>
            }
        </div>
        <div class="user-info">
            <h1 class="username">@Model.UserProfile?.Username</h1>
            <p class="user-bio">@(Model.UserProfile?.Bio ?? "No bio available")</p>
            <p class="join-date">
                <i class="fas fa-calendar-alt"></i>
                Joined @Model.UserProfile?.JoinDate.ToString("MMMM yyyy")
            </p>
            @if (Model.UserProfile?.IsAdmin == true)
            {
                <span class="admin-badge">
                    <i class="fas fa-star"></i> Admin
                </span>
            }
            
            @* Action buttons *@
            <div class="profile-actions mt-3">
                @if (Model.IsOwnProfile)
                {
                    <a href="~/Profile" class="btn btn-primary">
                        <i class="fas fa-edit"></i> Edit Profile
                    </a>
                }
                else
                {
                    <button type="button" class="btn btn-outline-primary btn-follow"
                                data-user-id="@(Model.UserProfile?.UserID ?? 0)"
                            data-following="@Model.IsFollowing.ToString().ToLower()">
                        <i class="fas @(Model.IsFollowing ? "fa-user-minus" : "fa-user-plus")"></i>
                        @(Model.IsFollowing ? "Unfollow" : "Follow")
                    </button>
                }
            </div>
        </div>
    </div>

    <div class="profile-stats">
        <div class="stat-item">
            <span class="stat-number">@(Model.UserProfile?.Activity?.PostsCount ?? 0)</span>
            <span class="stat-label">Posts</span>
        </div>
        <div class="stat-item">
            <span class="stat-number">@(Model.UserProfile?.Activity?.LikesCount ?? 0)</span>
            <span class="stat-label">Likes Given</span>
        </div>
        <div class="stat-item">
            <span class="stat-number">@(Model.UserProfile?.Activity?.SavedCount ?? 0)</span>
            <span class="stat-label">Saved Articles</span>
        </div>
        <div class="stat-item">
            <span class="stat-number">@(Model.UserProfile?.Activity?.FollowersCount ?? 0)</span>
            <span class="stat-label">Followers</span>
        </div>
    </div>

    <div class="profile-content">
        <div class="content-tabs">
            <button class="tab-btn active" data-tab="posts">
                <i class="fas fa-newspaper"></i> My Posts
            </button>
            @if (Model.IsOwnProfile)
            {
                <button class="tab-btn" data-tab="liked">
                    <i class="fas fa-heart"></i> Liked Posts
                </button>
                <button class="tab-btn" data-tab="saved">
                    <i class="fas fa-bookmark"></i> Saved Posts
                </button>
            }
            <button class="tab-btn" data-tab="activity">
                <i class="fas fa-chart-line"></i> Activity
            </button>
        </div>

        <!-- My Posts Tab -->
        <div class="tab-content active" id="posts-tab">
            <div class="user-posts" id="userPostsContainer">
                <!-- Posts will be loaded dynamically using unified template -->
            </div>
        </div>

        <!-- Liked Posts Tab (Only for own profile) -->
        @if (Model.IsOwnProfile)
        {
            <div class="tab-content" id="liked-tab">
                <div class="loading-placeholder" id="liked-loading">
                    <i class="fas fa-spinner fa-spin"></i> Loading liked posts...
                </div>
                <div class="user-posts" id="liked-posts-container"></div>
            </div>

            <!-- Saved Posts Tab (Only for own profile) -->
            <div class="tab-content" id="saved-tab">
                <div class="loading-placeholder" id="saved-loading">
                    <i class="fas fa-spinner fa-spin"></i> Loading saved posts...
                </div>
                <div class="user-posts" id="saved-posts-container"></div>
            </div>
        }

        <div class="tab-content" id="activity-tab">
            <div class="activity-overview">
                <h3>Activity Overview</h3>
                <div class="activity-grid">
                    <div class="activity-card">
                        <i class="fas fa-edit"></i>
                        <div>
                            <h4>Articles Published</h4>
                            <p>@Model.UserProfile?.Activity?.PostsCount total articles</p>
                        </div>
                    </div>
                    <div class="activity-card">
                        <i class="fas fa-thumbs-up"></i>
                        <div>
                            <h4>Engagement</h4>
                            <p>@Model.UserProfile?.Activity?.LikesCount likes given to other posts</p>
                        </div>
                    </div>
                    <div class="activity-card">
                        <i class="fas fa-bookmark"></i>
                        <div>
                            <h4>Curated Content</h4>
                            <p>@Model.UserProfile?.Activity?.SavedCount articles saved for later</p>
                        </div>
                    </div>
                    <div class="activity-card">
                        <i class="fas fa-users"></i>
                        <div>
                            <h4>Community</h4>
                            <p>@Model.UserProfile?.Activity?.FollowersCount followers</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Activity Section -->
            <div class="recent-activity-section">
                <h3>Recent Activity</h3>
                <p class="activity-description">Your recent interactions with articles (likes and comments)</p>
                
                <div id="recentActivityContainer" class="recent-activity-container">
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin"></i> Loading recent activity...
                    </div>
                </div>

                <div id="noActivityMessage" class="no-activity-message" style="display: none;">
                    <i class="fas fa-chart-line"></i>
                    <h4>No Recent Activity</h4>
                    <p>Start engaging with articles by liking and commenting to see your activity here.</p>
                </div>
            </div>
        </div>
    </div>
</div>

}

@section Scripts {
<script>
    // Tab switching functionality
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize unified post template system
        initializeUserProfile();
        
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                const targetTab = this.dataset.tab;
                tabBtns.forEach(b => b.classList.remove('active'));
                tabContents.forEach(c => c.classList.remove('active'));
                this.classList.add('active');
                document.getElementById(targetTab + '-tab').classList.add('active');
                
                // Load content for specific tabs
                if (targetTab === 'liked') {
                    loadLikedPosts();
                } else if (targetTab === 'saved') {
                    loadSavedPosts();
                } else if (targetTab === 'posts') {
                    loadUserPosts();
                } else if (targetTab === 'activity') {
                    loadUserActivity();
                }
            });
        });

        // Post management functionality
        setupPostManagement();
        
        // Comment functionality
        setupCommentHandlers();
        
        // Follow/Unfollow functionality
        setupFollowHandler();
        
        // Profile picture functionality
        setupProfilePictureHandler();
        
        // Load initial posts
        loadUserPosts();
    });

    // Initialize user profile with unified template system
    function initializeUserProfile() {
        const currentUserId = '@(Model.HeaderData?.user?.Id ?? 0)';
        const profileUserId = '@(Model.UserProfile?.UserID ?? 0)';
        const isOwnProfile = @Model.IsOwnProfile.ToString().ToLower();
        
        if (currentUserId && currentUserId !== '0') {
            window.postTemplateHelpers.setCurrentUser(currentUserId);
        }
        
        // Store profile context
        window.profileContext = {
            currentUserId: currentUserId,
            profileUserId: profileUserId,
            isOwnProfile: isOwnProfile,
            username: '@(Model.UserProfile?.Username ?? "")'
        };
    }

    // Load user posts using unified template
    async function loadUserPosts() {
        const container = document.getElementById('userPostsContainer');
        if (!container) return;
        
            const profileUserId = window.profileContext?.profileUserId || '@(Model.UserProfile?.UserID ?? 0)';
        
        try {
            container.innerHTML = '<div class="posts-loading">Loading posts...</div>';
            
            const response = await fetch(`/api/User/${profileUserId}/posts`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + (localStorage.getItem('jwtToken') || '')
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                
                if (data && data.length > 0) {
                    // Determine template context
                    const context = window.profileContext?.isOwnProfile ? 'ownProfile' : 'profile';
                    const options = {
                        isOwnPost: window.profileContext?.isOwnProfile,
                        isProfileView: true
                    };
                    
                    // Convert posts to expected format
                    const formattedPosts = data.map(post => ({
                        articleID: post.ArticleID || post.articleID,
                        title: post.Title || post.title,
                        content: post.Content || post.content,
                        category: post.Category || post.category,
                        publishDate: post.PublishDate || post.publishDate,
                        imageURL: post.ImageURL || post.imageURL,
                        sourceURL: post.SourceURL || post.sourceURL,
                        sourceName: post.SourceName || post.sourceName,
                        likes: post.LikesCount || post.likes || 0,
                        views: post.ViewsCount || post.views || 0,
                        comments: post.CommentsCount || post.comments || 0,
                        user: {
                            username: window.profileContext?.username || 'Unknown User',
                            userId: window.profileContext?.profileUserId
                        }
                    }));
                    
                    window.postTemplateHelpers.renderPosts(formattedPosts, 'userPostsContainer', context, options);
                } else {
                    container.innerHTML = `
                        <div class="no-posts">
                            <i class="fas fa-file-alt"></i>
                            <h4>No Posts Yet</h4>
                            <p>${window.profileContext?.isOwnProfile ? "You haven't" : window.profileContext?.username + " hasn't"} posted anything yet.</p>
                            ${window.profileContext?.isOwnProfile ? '<a href="/Post" class="btn btn-primary"><i class="fas fa-plus"></i> Create Your First Post</a>' : ''}
                        </div>
                    `;
                }
            } else {
                throw new Error('Failed to load posts');
            }
        } catch (error) {
            console.error('Error loading user posts:', error);
            container.innerHTML = `
                <div class="error-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>Failed to Load Posts</h4>
                    <p>There was an error loading the posts. Please try again.</p>
                    <button onclick="loadUserPosts()" class="btn btn-primary">Retry</button>
                </div>
            `;
        }
    }

    function setupPostManagement() {
        // Set up global post interaction handlers for unified template
        window.editPost = function(postId) {
            window.location.href = `/Posts/Edit/${postId}`;
        };
        
        window.deletePost = async function(postId) {
            if (!confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/Posts/${postId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': 'Bearer ' + (localStorage.getItem('jwtToken') || ''),
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    // Remove post from UI using unified template helper
                    window.postTemplateHelpers.removePost(postId, 'userPostsContainer');
                    window.postInteractions.showToast('Post deleted successfully', 'success');
                } else {
                    throw new Error('Failed to delete post');
                }
            } catch (error) {
                console.error('Error deleting post:', error);
                window.postInteractions.showToast('Failed to delete post. Please try again.', 'error');
            }
        };
        
        window.commentPost = function(postId) {
            // Toggle comment section for own posts
            const commentSection = document.getElementById(`comment-section-${postId}`);
            if (commentSection) {
                commentSection.style.display = commentSection.style.display === 'none' ? 'block' : 'none';
            } else {
                // Redirect to post detail page for commenting
                window.location.href = `/Post/${postId}`;
            }
        };
        
        // Legacy event handlers for any remaining old-style elements
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('edit-post')) {
                const postId = e.target.dataset.postId;
                window.editPost(postId);
            } else if (e.target.classList.contains('delete-post')) {
                const postId = e.target.dataset.postId;
                window.deletePost(postId);
            } else if (e.target.classList.contains('comment-post')) {
                const postId = e.target.dataset.postId;
                window.commentPost(postId);
            }
        });
    }

    function setupCommentHandlers() {
        // Toggle comment sections
        document.querySelectorAll('.comment-own-post').forEach(btn => {
            btn.addEventListener('click', function() {
                const postId = this.dataset.postId;
                const commentSection = document.getElementById(`comment-section-${postId}`);
                if (commentSection) {
                    commentSection.style.display = commentSection.style.display === 'none' ? 'block' : 'none';
                }
            });
        });

        // Submit comments
        document.querySelectorAll('.submit-comment').forEach(btn => {
            btn.addEventListener('click', async function() {
                const postId = this.dataset.postId;
                const textarea = document.querySelector(`.comment-input[data-post-id="${postId}"]`);
                const comment = textarea.value.trim();
                
                if (!comment) {
                    showMessage('Please enter a comment', 'error');
                    return;
                }

                try {
                    const response = await fetch('/api/comments', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({
                            postId: parseInt(postId),
                            content: comment
                        })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        textarea.value = '';
                        showMessage('Comment added successfully', 'success');
                        // Optionally reload comments or update UI
                    } else {
                        showMessage(result.message || 'Failed to add comment', 'error');
                    }
                } catch (error) {
                    showMessage('An error occurred while adding the comment', 'error');
                }
            });
        });
    }

    async function loadLikedPosts() {
        const container = document.getElementById('liked-posts-container');
        const loading = document.getElementById('liked-loading');
        
        if (container.innerHTML.trim() !== '') return; // Already loaded
        
        loading.style.display = 'block';
        
        try {
            const response = await fetch('/UserProfile?handler=GetLikedPosts', {
                method: 'GET',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            });
            
            const result = await response.json();
            if (result.success && result.posts) {
                container.innerHTML = renderPosts(result.posts, 'liked');
            } else {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-heart"></i>
                        <h3>No liked posts</h3>
                        <p>You haven't liked any posts yet. Start exploring and like posts you find interesting!</p>
                    </div>
                `;
            }
        } catch (error) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Error loading liked posts</h3>
                    <p>Please try again later.</p>
                </div>
            `;
        } finally {
            loading.style.display = 'none';
        }
    }

    async function loadSavedPosts() {
        const container = document.getElementById('saved-posts-container');
        const loading = document.getElementById('saved-loading');
        
        if (container.innerHTML.trim() !== '') return; // Already loaded
        
        loading.style.display = 'block';
        
        try {
            const response = await fetch('/UserProfile?handler=GetSavedPosts', {
                method: 'GET',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            });
            
            const result = await response.json();
            if (result.success && result.posts) {
                container.innerHTML = renderPosts(result.posts, 'saved');
            } else {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-bookmark"></i>
                        <h3>No saved posts</h3>
                        <p>You haven't saved any posts yet. Save posts to read them later!</p>
                    </div>
                `;
            }
        } catch (error) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Error loading saved posts</h3>
                    <p>Please try again later.</p>
                </div>
            `;
        } finally {
            loading.style.display = 'none';
        }
    }

    async function loadUserActivity() {
        const container = document.getElementById('recentActivityContainer');
        const noActivityMessage = document.getElementById('noActivityMessage');
        
        if (!container) return;
        
        // Check if already loaded (has content other than loading placeholder)
        if (!container.querySelector('.loading-placeholder')) return;
        
        try {
            const response = await fetch('/UserProfile?handler=GetUserActivity', {
                method: 'GET',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            });
            
            const result = await response.json();
            if (result.success && result.activities && result.activities.length > 0) {
                container.innerHTML = renderUserActivity(result.activities);
                noActivityMessage.style.display = 'none';
            } else {
                container.innerHTML = '';
                noActivityMessage.style.display = 'block';
            }
        } catch (error) {
            container.innerHTML = `
                <div class="error-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>Error loading activity</h4>
                    <p>Please try again later.</p>
                </div>
            `;
            noActivityMessage.style.display = 'none';
        }
    }

    function renderUserActivity(activities) {
        return activities.map(activity => `
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas fa-${activity.activityType === 'liked' ? 'heart' : 'comment'}"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-header">
                        <span class="activity-action">
                            You ${activity.activityType} ${activity.activityType === 'liked' ? 'an article' : 'on an article'}
                        </span>
                        <span class="activity-date">${formatActivityDate(activity.activityDate)}</span>
                    </div>
                    <div class="activity-article">
                        <a href="~/Post/${activity.articleID}" class="activity-article-link">
                            ${activity.imageURL ? `
                                <div class="activity-article-image">
                                    <img src="${activity.imageURL}" alt="${activity.title}" loading="lazy">
                                </div>
                            ` : ''}
                            <div class="activity-article-info">
                                <h4 class="activity-article-title">${activity.title}</h4>
                                <div class="activity-article-meta">
                                    <span class="activity-category">${activity.category}</span>
                                    <span class="activity-author">by ${activity.username}</span>
                                    ${activity.sourceName ? `<span class="activity-source">${activity.sourceName}</span>` : ''}
                                </div>
                            </div>
                        </a>
                    </div>
                </div>
            </div>
        `).join('');
    }

    function formatActivityDate(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffInHours = (now - date) / (1000 * 60 * 60);
        
        if (diffInHours < 1) {
            return 'Just now';
        } else if (diffInHours < 24) {
            return `${Math.floor(diffInHours)} hour${Math.floor(diffInHours) !== 1 ? 's' : ''} ago`;
        } else if (diffInHours < 24 * 7) {
            const days = Math.floor(diffInHours / 24);
            return `${days} day${days !== 1 ? 's' : ''} ago`;
        } else {
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        }
    }

    function renderPosts(posts, type) {
        if (!posts || posts.length === 0) {
            return `
                <div class="empty-state">
                    <i class="fas fa-${type === 'liked' ? 'heart' : 'bookmark'}"></i>
                    <h3>No ${type} posts</h3>
                    <p>You haven't ${type} any posts yet.</p>
                </div>
            `;
        }

        return posts.map(post => `
            <div class="post-card">
                <div class="post-header">
                    <h3 class="post-title">${post.title}</h3>
                    <div class="post-meta">
                        <span class="post-category">${post.category}</span>
                        <span class="post-date">${new Date(post.publishDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</span>
                        <span class="post-author">by ${post.username}</span>
                    </div>
                </div>
                
                ${post.imageURL ? `
                    <div class="post-image">
                        <img src="${post.imageURL}" alt="${post.title}" loading="lazy">
                    </div>
                ` : ''}
                
                <div class="post-content">
                    <p>${post.content.substring(0, 200)}${post.content.length > 200 ? '...' : ''}</p>
                </div>

                ${post.sourceURL ? `
                    <div class="post-source">
                        <i class="fas fa-external-link-alt"></i>
                        <span>Source: 
                            <a href="${post.sourceURL}" target="_blank" rel="noopener">
                                ${post.sourceName || 'External Link'}
                            </a>
                        </span>
                    </div>
                ` : ''}
                
                <div class="post-stats">
                    <span class="stat">
                        <i class="fas fa-heart"></i> ${post.likesCount} likes
                    </span>
                    <span class="stat">
                        <i class="fas fa-eye"></i> ${post.viewsCount} views
                    </span>
                    <a href="/Post/${post.articleID}" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-external-link-alt"></i> Read More
                    </a>
                </div>
            </div>
        `).join('');
    }

    function setupFollowHandler() {
        const followButton = document.querySelector('.btn-follow');
        if (followButton) {
            followButton.addEventListener('click', async function() {
                // Use the global follow manager for consistency
                if (window.followStatusManager) {
                    const username = this.dataset.username || '@Model.UserProfile?.Username' || 'User';
                    if (!this.dataset.username) {
                        this.dataset.username = username;
                    }
                    window.followStatusManager.handleFollowClick(this);
                    return;
                }
                
                // Fallback implementation
                const userId = this.dataset.userId;
                const isFollowing = this.dataset.following === 'true';
                
                try {
                    const response = await fetch(`/api/User/Follow/${userId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const result = await response.json();
                    if (response.ok) {
                        // Update button state
                        const newFollowing = result.isFollowing;
                        this.dataset.following = newFollowing.toString();
                        
                        const icon = this.querySelector('i');
                        icon.className = newFollowing ? 'fas fa-user-minus' : 'fas fa-user-plus';
                        
                        const text = this.childNodes[this.childNodes.length - 1];
                        text.textContent = newFollowing ? ' Unfollow' : ' Follow';
                        
                        // Show success message
                        showMessage(result.message, 'success');
                    } else {
                        showMessage(result.message || 'An error occurred', 'error');
                    }
                } catch (error) {
                    showMessage('An error occurred', 'error');
                }
            });
        }
    }

    function setupProfilePictureHandler() {
        const input = document.getElementById('profilePicInput');
        const preview = document.getElementById('profilePicPreview');
        const uploadBtn = document.getElementById('uploadPicBtn');
        
        if (input && preview && uploadBtn) {
            input.addEventListener('change', function() {
                preview.innerHTML = '';
                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        preview.innerHTML = `<img src='${e.target.result}' style='width:80px;height:80px;border-radius:50%;object-fit:cover;' />`;
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            });
            
            uploadBtn.addEventListener('click', function(e) {
                e.preventDefault();
                if (!input.files || !input.files[0]) {
                    showMessage('Please select an image.', 'error');
                    return;
                }
                
                const formData = new FormData();
                formData.append('file', input.files[0]);
                
                fetch('/api/user/UploadProfilePic', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': getAntiForgeryToken()
                    }
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success && data.path) {
                        // Update the avatar image
                        const profileImg = document.querySelector('.profile-pic-img');
                        if (profileImg) {
                            profileImg.src = data.path;
                        }
                        showMessage('Profile picture updated!', 'success');
                    } else {
                        showMessage(data.message || 'Upload failed.', 'error');
                    }
                })
                .catch(error => {
                    showMessage('Upload failed.', 'error');
                });
            });
        }
    }
    
    function getAntiForgeryToken() {
        return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
    }
    
    function showMessage(message, type) {
        // Create toast notification
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
        toast.style.top = '20px';
        toast.style.right = '20px';
        toast.style.zIndex = '9999';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        // Auto remove after 3 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 3000);
    }
</script>
}

<style>
.user-profile-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.profile-header {
    display: flex;
    align-items: center;
    gap: 2rem;
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid #e9ecef;
}

.user-avatar .avatar-circle {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 3rem;
}

.user-info {
    flex: 1;
}

.username {
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: #333;
}

.user-bio {
    font-size: 1.1rem;
    color: #666;
    margin-bottom: 1rem;
}

.join-date {
    color: #888;
    font-size: 0.9rem;
}

.admin-badge {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: bold;
    display: inline-block;
    margin-top: 0.5rem;
}

.profile-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.stat-item {
    text-align: center;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    transition: transform 0.2s;
}

.stat-item:hover {
    transform: translateY(-2px);
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: #007bff;
}

.stat-label {
    font-size: 0.9rem;
    color: #666;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.content-tabs {
    display: flex;
    border-bottom: 2px solid #e9ecef;
    margin-bottom: 2rem;
    gap: 0.5rem;
}

.tab-btn {
    background: none;
    border: none;
    padding: 1rem 1.5rem;
    font-size: 1rem;
    color: #666;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    transition: all 0.3s;
}

.tab-btn:hover,
.tab-btn.active {
    color: #007bff;
    border-bottom-color: #007bff;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.post-card {
    background: #fff;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    transition: box-shadow 0.3s;
}

.post-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.post-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
}

.post-title {
    font-size: 1.3rem;
    font-weight: bold;
    margin: 0;
    color: #333;
}

.post-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 0.9rem;
    color: #666;
}

.post-actions {
    display: flex;
    gap: 0.5rem;
}

.post-category {
    background: #e3f2fd;
    color: #1976d2;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
}

.post-image img {
    width: 100%;
    max-height: 300px;
    object-fit: cover;
    border-radius: 8px;
    margin-bottom: 1rem;
}

.post-content p {
    line-height: 1.6;
    margin-bottom: 1rem;
}

.post-source {
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: #666;
}

.post-source a {
    color: #007bff;
    text-decoration: none;
}

.post-source a:hover {
    text-decoration: underline;
}

.post-stats {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-top: 1px solid #e9ecef;
    padding-top: 1rem;
}

.post-stats .stat {
    color: #666;
    font-size: 0.9rem;
}

.post-actions-inline {
    display: flex;
    gap: 0.5rem;
}

.comment-section {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e9ecef;
}

.comment-input {
    resize: vertical;
    min-height: 80px;
}

.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: #666;
}

.empty-state i {
    font-size: 4rem;
    margin-bottom: 1rem;
    color: #ccc;
}

.empty-state h3 {
    margin-bottom: 1rem;
}

.loading-placeholder {
    text-align: center;
    padding: 2rem;
    color: #666;
    font-size: 1.1rem;
}

.loading-placeholder i {
    margin-right: 0.5rem;
}

.activity-overview h3 {
    margin-bottom: 1.5rem;
    color: #333;
}

.activity-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
}

.activity-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #007bff;
}

.activity-card i {
    font-size: 2rem;
    color: #007bff;
}

.activity-card h4 {
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
    color: #333;
}

.activity-card p {
    margin: 0;
    color: #666;
    font-size: 0.9rem;
}

/* Recent Activity Styles */
.recent-activity-section {
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid #e9ecef;
}

.recent-activity-section h3 {
    margin-bottom: 0.5rem;
    color: #333;
}

.activity-description {
    color: #666;
    margin-bottom: 1.5rem;
    font-size: 0.95rem;
}

.recent-activity-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.loading-placeholder {
    text-align: center;
    padding: 2rem;
    color: #666;
}

.loading-placeholder i {
    margin-right: 0.5rem;
}

.activity-item {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #28a745;
    transition: all 0.3s ease;
}

.activity-item:hover {
    background: #f1f3f4;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.activity-icon {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #28a745;
    color: white;
    border-radius: 50%;
    font-size: 1rem;
}

.activity-item .activity-icon .fa-heart {
    color: #dc3545;
    background: rgba(220, 53, 69, 0.1);
}

.activity-item .activity-icon .fa-comment {
    color: #007bff;
    background: rgba(0, 123, 255, 0.1);
}

.activity-content {
    flex: 1;
    min-width: 0;
}

.activity-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.activity-action {
    font-weight: 500;
    color: #333;
    font-size: 0.9rem;
}

.activity-date {
    color: #666;
    font-size: 0.8rem;
}

.activity-article {
    background: white;
    border-radius: 6px;
    overflow: hidden;
    border: 1px solid #e9ecef;
}

.activity-article-link {
    display: flex;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s ease;
}

.activity-article-link:hover {
    background: #f8f9fa;
    color: inherit;
    text-decoration: none;
}

.activity-article-image {
    flex-shrink: 0;
    width: 80px;
    height: 60px;
    overflow: hidden;
}

.activity-article-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.activity-article-info {
    flex: 1;
    padding: 0.75rem;
    min-width: 0;
}

.activity-article-title {
    margin: 0 0 0.5rem 0;
    font-size: 0.9rem;
    font-weight: 600;
    color: #333;
    line-height: 1.3;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
}

.activity-article-meta {
    display: flex;
    gap: 0.75rem;
    align-items: center;
    font-size: 0.8rem;
    color: #666;
}

.activity-category {
    background: #007bff;
    color: white;
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    font-size: 0.7rem;
    font-weight: 500;
}

.activity-author, .activity-source {
    color: #666;
}

.no-activity-message {
    text-align: center;
    padding: 3rem 1rem;
    color: #666;
}

.no-activity-message i {
    font-size: 3rem;
    color: #dee2e6;
    margin-bottom: 1rem;
}

.no-activity-message h4 {
    margin-bottom: 0.5rem;
    color: #333;
}

.error-state {
    text-align: center;
    padding: 2rem;
    color: #dc3545;
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 8px;
}

.error-state i {
    font-size: 2rem;
    margin-bottom: 1rem;
}

@@media (max-width: 768px) {
    .user-profile-container {
        padding: 1rem;
    }
    
    .profile-header {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }
    
    .content-tabs {
        flex-wrap: wrap;
    }
    
    .tab-btn {
        flex: 1;
        min-width: 120px;
    }
    
    .post-header {
        flex-direction: column;
        gap: 1rem;
    }
    
    .post-meta {
        flex-wrap: wrap;
    }
    
    .post-stats {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }
    
    .post-actions-inline {
        justify-content: center;
    }
}

.username {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
}

.user-bio {
    font-size: 1.1rem;
    color: #666;
    margin: 0 0 1rem 0;
    line-height: 1.5;
}

.join-date {
    color: #888;
    margin: 0 0 1rem 0;
}

.join-date i {
    margin-right: 0.5rem;
}

.admin-badge {
    display: inline-block;
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 600;
    font-size: 0.9rem;
}

.admin-badge i {
    margin-right: 0.5rem;
}

.profile-actions {
    margin-top: 1rem;
}

.profile-actions .btn {
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

.btn-follow {
    min-width: 120px;
    transition: all 0.3s ease;
}

.btn-follow:hover {
    transform: translateY(-1px);
}

.profile-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stat-item {
    text-align: center;
    padding: 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    color: white;
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.stat-label {
    font-size: 0.9rem;
    opacity: 0.9;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.content-tabs {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    border-bottom: 2px solid #e9ecef;
}

.tab-btn {
    background: none;
    border: none;
    padding: 1rem 1.5rem;
    font-size: 1rem;
    color: #666;
    cursor: pointer;
    border-bottom: 3px solid transparent;
    transition: all 0.3s ease;
}

.tab-btn:hover, .tab-btn.active {
    color: #007bff;
    border-bottom-color: #007bff;
}

.tab-btn i {
    margin-right: 0.5rem;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.post-card {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    border-left: 4px solid #007bff;
}

.post-header {
    margin-bottom: 1rem;
}

.post-title {
    font-size: 1.3rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
}

.post-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.9rem;
    color: #666;
}

.post-category {
    background: #007bff;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-weight: 500;
}

.post-image {
    margin: 1rem 0;
    border-radius: 8px;
    overflow: hidden;
}

.post-image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.post-content p {
    line-height: 1.6;
    color: #555;
    margin: 0;
}

.post-source {
    margin: 1rem 0;
    padding: 0.75rem;
    background: rgba(0, 123, 255, 0.1);
    border-radius: 8px;
    font-size: 0.9rem;
}

.post-source i {
    color: #007bff;
    margin-right: 0.5rem;
}

.post-source a {
    color: #007bff;
    text-decoration: none;
}

.post-source a:hover {
    text-decoration: underline;
}

.post-stats {
    display: flex;
    gap: 1.5rem;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #666;
}

.post-stats .stat i {
    margin-right: 0.25rem;
    color: #007bff;
}

.empty-state {
    text-align: center;
    padding: 3rem;
    color: #666;
}

.empty-state i {
    font-size: 3rem;
    color: #ddd;
    margin-bottom: 1rem;
}

.empty-state h3 {
    margin: 1rem 0 0.5rem 0;
    color: #888;
}

.activity-overview h3 {
    margin-bottom: 1.5rem;
    color: #2c3e50;
}

.activity-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.activity-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background: #f8f9fa;
    border-radius: 12px;
    border-left: 4px solid #28a745;
}

.activity-card i {
    font-size: 2rem;
    color: #28a745;
}

.activity-card h4 {
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
    font-size: 1.1rem;
}

.activity-card p {
    margin: 0;
    color: #666;
    font-size: 0.9rem;
}

@@media (max-width: 768px) {
    .user-profile-container {
        padding: 1rem;
        margin: 1rem;
    }
    
    .profile-header {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }
    
    .user-avatar .avatar-circle {
        width: 80px;
        height: 80px;
        font-size: 2rem;
    }
    
    .username {
        font-size: 2rem;
    }
    
    .profile-stats {
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }
    
    .content-tabs {
        flex-wrap: wrap;
    }
    
    .activity-grid {
        grid-template-columns: 1fr;
    }
}
</style>

@page "/userprofile/{userId:int?}"
@model NewsSite.Pages.UserProfileModel
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = $"{Model.UserProfile?.Username ?? "User"}'s Profile";
    ViewData["HeaderData"] = Model.HeaderData;
}

@{
    // Include unified post template system
    await Html.RenderPartialAsync("_PostTemplatePartial");
}

@if (ViewData["ErrorMessage"] != null)
{
    <div class="container mt-4">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">
                <i class="fas fa-exclamation-triangle"></i>
                Error
            </h4>
            <p>@ViewData["ErrorMessage"]</p>
            @if (ViewData["ExceptionMessage"] != null)
            {
                <hr>
                <p class="mb-0 small text-muted">
                    <strong>Technical details:</strong> @ViewData["ExceptionMessage"]
                </p>
            }
            <hr>
            <div class="d-flex gap-2">
                <a href="~/" class="btn btn-primary">
                    <i class="fas fa-home"></i> Go Home
                </a>
                <button onclick="window.history.back()" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Go Back
                </button>
            </div>
        </div>
    </div>
}
else
{

<div class="user-profile-container">
    <div class="profile-header">
        <div class="user-avatar">
            @if (Model.IsOwnProfile)
            {
                <div class="avatar-clickable" style="cursor: pointer; position: relative;">
                    @if (!string.IsNullOrEmpty(Model.UserProfile?.ProfilePicture))
                    {
                        <img src="@Model.UserProfile.ProfilePicture" alt="@Model.UserProfile.Username" class="avatar-circle profile-image" />
                    }
                    else
                    {
                        <div class="avatar-circle">
                            @(Model.UserProfile?.Username?.Substring(0,1).ToUpper() ?? "?")
                        </div>
                    }
                    <div class="avatar-overlay">
                        <i class="fas fa-camera"></i>
                        <span>Change Photo</span>
                    </div>
                </div>
                <input type="file" id="avatarInput" accept="image/*" style="display: none;" />
            }
            else
            {
                @if (!string.IsNullOrEmpty(Model.UserProfile?.ProfilePicture))
                {
                    <img src="@Model.UserProfile.ProfilePicture" alt="@Model.UserProfile.Username" class="avatar-circle profile-image" />
                }
                else
                {
                    <div class="avatar-circle">
                        @(Model.UserProfile?.Username?.Substring(0,1).ToUpper() ?? "?")
                    </div>
                }
            }
        </div>
        <div class="user-info">
            <h1 class="username">@Model.UserProfile?.Username</h1>
            @if (!string.IsNullOrEmpty(Model.UserProfile?.Bio)) {
                <p class="user-bio">@Model.UserProfile.Bio</p>
            }
            <p class="join-date">
                <i class="fas fa-calendar-alt"></i> Joined @Model.UserProfile?.JoinDate.ToString("MMMM dd, yyyy")
            </p>
            @if (Model.UserProfile?.IsAdmin == true) {
                <span class="admin-badge"><i class="fas fa-user-shield"></i> Admin</span>
            }
            @if (!Model.IsOwnProfile) {
                <div class="profile-actions">
                    <button class="btn btn-outline-primary btn-follow" data-user-id="@Model.UserProfile?.UserID" data-following="@Model.IsFollowing.ToString().ToLower()" data-username="@(Model.UserProfile?.Username ?? "User")">
                        <i class="fas @(Model.IsFollowing ? "fa-user-minus" : "fa-user-plus")"></i>
                        @(Model.IsFollowing ? " Unfollow" : " Follow")
                    </button>
                </div>
            }
        </div>
    </div>
    <div class="profile-stats">
        <div class="stat-item">
            <span class="stat-number">@(Model.UserProfile?.Activity?.FollowersCount ?? 0)</span>
            <span class="stat-label">Followers</span>
        </div>
        <div class="stat-item">
            <span class="stat-number">@(Model.UserProfile?.Activity?.FollowingCount ?? 0)</span>
            <span class="stat-label">Following</span>
        </div>
    </div>

    <div class="profile-content">
        <div class="content-tabs">
            <button class="tab-btn active" data-tab="posts">
                <i class="fas fa-newspaper"></i> My Posts
            </button>
            @if (Model.IsOwnProfile)
            {
                <button class="tab-btn" data-tab="saved">
                    <i class="fas fa-bookmark"></i> Saved Posts
                </button>
            }
            <button class="tab-btn" data-tab="activity">
                <i class="fas fa-chart-line"></i> Activity
            </button>
            @if (Model.IsOwnProfile)
            {
                <button class="tab-btn" data-tab="blocked">
                    <i class="fas fa-user-slash"></i> Blocked Users
                </button>
            }
        </div>

        <!-- My Posts Tab -->
        <div class="tab-content active" id="posts-tab">
            <div class="user-posts" id="userPostsContainer">
                <!-- Posts will be loaded dynamically using unified template -->
            </div>
        </div>
        @if (Model.IsOwnProfile)
        {
            <div class="tab-content" id="blocked-tab">
                <div id="blockedUsersContainer" class="blocked-users-container">
                    <!-- Blocked users will be loaded here -->
                </div>
                <div id="noBlockedMessage" class="no-activity-message" style="display: none;">
                    <i class="fas fa-user-slash"></i>
                    <h4>No Blocked Users</h4>
                    <p>You have not blocked any users.</p>
                </div>
            </div>
        }

        <!-- Saved Posts Tab (Only for own profile) -->
        @if (Model.IsOwnProfile)
        {
            <div class="tab-content" id="saved-tab">
                <div class="loading-placeholder" id="saved-loading">
                    <i class="fas fa-spinner fa-spin"></i> Loading saved posts...
                </div>
                <div class="user-posts" id="saved-posts-container"></div>
            </div>
        }

        <div class="tab-content" id="activity-tab">
            <!-- Recent Activity Section -->
            <div class="recent-activity-section">
                <h3>Recent Activity</h3>
                <p class="activity-description">
                    @if (Model.IsOwnProfile)
                    {
                        @:Your recent interactions with articles (likes and comments)
                    }
                    else
                    {
                        @:@Model.UserProfile?.Username's recent interactions with articles (likes and comments)
                    }
                </p>
                
                <div id="recentActivityContainer" class="recent-activity-container">
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin"></i> Loading recent activity...
                    </div>
                </div>

                <div id="noActivityMessage" class="no-activity-message" style="display: none;">
                    <i class="fas fa-chart-line"></i>
                    <h4>No Recent Activity</h4>
                    <p>Start engaging with articles by liking and commenting to see your activity here.</p>
                </div>
            </div>
        </div>
    </div>
</div>

}

<!-- Followers Modal -->
<div class="modal fade" id="followersModal" tabindex="-1" aria-labelledby="followersModalLabel" aria-hidden="true" style="display: none;">
    <!-- Modal removed - feature not implemented yet -->
</div>

<!-- Following Modal -->
<div class="modal fade" id="followingModal" tabindex="-1" aria-labelledby="followingModalLabel" aria-hidden="true" style="display: none;">
    <!-- Modal removed - feature not implemented yet -->
</div>

<!-- Include required CSS -->
<link rel="stylesheet" href="~/css/userprofile.css" />
<link rel="stylesheet" href="~/css/post-card.css" />
<link rel="stylesheet" href="~/css/mobile-responsive.css" />
<link rel="stylesheet" href="~/css/site.css" />

<style>
    /* Avatar overlay styles for profile picture change */
    .avatar-clickable {
        position: relative;
        display: inline-block;
    }
    
    .avatar-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        border-radius: 50%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
        color: white;
        font-size: 0.8rem;
        text-align: center;
    }
    
    .avatar-overlay i {
        font-size: 1.5rem;
        margin-bottom: 4px;
    }
    
    .avatar-clickable:hover .avatar-overlay {
        opacity: 1;
    }
    
    /* Toast styles for notifications */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }
    
    .toast {
        background: #333;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        margin-bottom: 10px;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
        max-width: 300px;
    }
    
    .toast.show {
        opacity: 1;
        transform: translateX(0);
    }
    
    .toast.toast-success {
        background: #28a745;
    }
    
    .toast.toast-error {
        background: #dc3545;
    }
    
    .toast.toast-info {
        background: #17a2b8;
    }
</style>

@section Scripts {
    <!-- Required JS files are already included in _Layout.cshtml -->
    <script src="~/js/userprofile.js"></script>
    <script src="~/js/post-interactions.js"></script>
    
    <script>
        // Initialize user profile functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Set up profile context for other scripts
            window.profileContext = {
                currentUserId: '@(Model.HeaderData?.user?.Id ?? 0)',
                profileUserId: '@(Model.UserProfile?.UserID ?? 0)',
                isOwnProfile: @Model.IsOwnProfile.ToString().ToLower(),
                username: '@(Model.UserProfile?.Username ?? "")'
            };
            
            // Initialize unified post template system if available
            if (window.postTemplateHelpers && window.profileContext.currentUserId !== '0') {
                window.postTemplateHelpers.setCurrentUser(window.profileContext.currentUserId);
            }
            
            // Set up tab switching
            initializeTabs();
            
            // Load initial posts
            loadUserPosts();
            
            // Set up follow functionality if available
            if (window.followStatusManager) {
                setupFollowHandler();
            }
            
            // Set up avatar upload functionality for own profile
            if (window.profileContext.isOwnProfile) {
                setupAvatarUpload();
            }
        });

        function initializeTabs() {
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const targetTab = this.dataset.tab;
                    
                    // Update active states
                    tabBtns.forEach(b => b.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));
                    this.classList.add('active');
                    document.getElementById(targetTab + '-tab').classList.add('active');
                    
                    // Load content for specific tabs
                    switch(targetTab) {
                        case 'saved':
                            loadSavedPosts();
                            break;
                        case 'posts':
                            loadUserPosts();
                            break;
                        case 'activity':
                            loadUserActivity();
                            break;
                        case 'blocked':
                            if (window.profileContext.isOwnProfile) {
                                loadBlockedUsers();
                            }
                            break;
                    }
                });
            });
        }

        // Load user posts using the proper hybrid API endpoint
        async function loadUserPosts() {
            const container = document.getElementById('userPostsContainer');
            if (!container) return;
            
            const profileUserId = window.profileContext?.profileUserId || '@(Model.UserProfile?.UserID ?? 0)';
            
            try {
                container.innerHTML = '<div class="posts-loading"><i class="fas fa-spinner fa-spin"></i> Loading posts...</div>';
                
                // Use the hybrid API that returns rendered HTML
                const apiUrl = window.ApiConfig.getApiUrl(`/api/News/posts/context/profile?userId=${profileUserId}&page=1&limit=10`);
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const htmlContent = await response.text();
                    
                    if (htmlContent && htmlContent.trim().length > 0) {
                        container.innerHTML = htmlContent;
                    } else {
                        container.innerHTML = `
                            <div class="empty-state text-center py-5">
                                <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                                <h4>No Posts Yet</h4>
                                <p class="text-muted">${window.profileContext?.isOwnProfile ? "You haven't" : window.profileContext?.username + " hasn't"} posted anything yet.</p>
                                ${window.profileContext?.isOwnProfile ? '<a href="/Post" class="btn btn-primary mt-2"><i class="fas fa-plus"></i> Create Your First Post</a>' : ''}
                            </div>
                        `;
                    }
                } else {
                    throw new Error('Failed to load posts');
                }
            } catch (error) {
                console.error('Error loading user posts:', error);
                container.innerHTML = `
                    <div class="error-state text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-2x text-danger mb-3"></i>
                        <h4>Failed to Load Posts</h4>
                        <p class="text-muted">There was an error loading the posts. Please try again.</p>
                        <button onclick="loadUserPosts()" class="btn btn-primary">Retry</button>
                    </div>
                `;
            }
        }

        // Load saved posts using the hybrid API
        async function loadSavedPosts() {
            const container = document.getElementById('saved-posts-container');
            const loadingEl = document.getElementById('saved-loading');
            
            if (!container || !window.profileContext?.isOwnProfile) return;
            
            try {
                loadingEl.style.display = 'block';
                container.innerHTML = '';
                
                // Use the saved posts API endpoint
                const apiUrl = window.ApiConfig.getApiUrl('/api/News/posts/saved?page=1&limit=10');
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const htmlContent = await response.text();
                    loadingEl.style.display = 'none';
                    
                    if (htmlContent && htmlContent.trim().length > 0) {
                        container.innerHTML = htmlContent;
                    } else {
                        container.innerHTML = `
                            <div class="empty-state text-center py-5">
                                <i class="fas fa-bookmark fa-3x text-muted mb-3"></i>
                                <h4>No Saved Articles</h4>
                                <p class="text-muted">You haven't saved any articles yet.</p>
                                <small class="text-muted">Click the bookmark icon on any article to save it for later.</small>
                            </div>
                        `;
                    }
                } else if (response.status === 401) {
                    loadingEl.style.display = 'none';
                    container.innerHTML = `
                        <div class="error-state text-center py-4">
                            <i class="fas fa-lock fa-2x text-warning mb-3"></i>
                            <h4>Login Required</h4>
                            <p class="text-muted">Please log in to view your saved articles.</p>
                        </div>
                    `;
                } else {
                    throw new Error('Failed to load saved posts');
                }
            } catch (error) {
                console.error('Error loading saved posts:', error);
                loadingEl.style.display = 'none';
                container.innerHTML = `
                    <div class="error-state text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-2x text-danger mb-3"></i>
                        <h4>Failed to Load Saved Posts</h4>
                        <p class="text-muted">There was an error loading your saved posts. Please try again.</p>
                        <button onclick="loadSavedPosts()" class="btn btn-primary">Retry</button>
                    </div>
                `;
            }
        }

        function loadUserActivity() {
            const container = document.getElementById('recentActivityContainer');
            if (!container) return;
            
            const profileUserId = window.profileContext?.profileUserId || '@(Model.UserProfile?.UserID ?? 0)';
            
            try {
                container.innerHTML = '<div class="loading-placeholder"><i class="fas fa-spinner fa-spin"></i> Loading recent activity...</div>';
                
                const apiUrl = window.ApiConfig.getApiUrl(`/UserProfile?handler=GetUserActivity&userId=${profileUserId}`);
                fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.activities && data.activities.length > 0) {
                        const activitiesHTML = data.activities.map(activity => `
                            <div class="activity-item">
                                <div class="activity-icon">
                                    <i class="fas ${activity.activityType === 'like' ? 'fa-heart' : 'fa-comment'}"></i>
                                </div>
                                <div class="activity-content">
                                    <div class="activity-header">
                                        <span class="activity-action">
                                            ${activity.activityType === 'like' ? 'Liked' : 'Commented on'} an article
                                        </span>
                                        <span class="activity-date">${new Date(activity.activityDate).toLocaleDateString()}</span>
                                    </div>
                                    <div class="activity-article">
                                        <a href="/Post/${activity.articleID}" class="activity-article-link">
                                            ${activity.imageURL ? `<div class="activity-article-image"><img src="${activity.imageURL}" alt="Article image"></div>` : ''}
                                            <div class="activity-article-info">
                                                <h4 class="activity-article-title">${activity.title}</h4>
                                                <div class="activity-article-meta">
                                                    <span class="activity-category">${activity.category}</span>
                                                    ${activity.sourceName ? `<span class="activity-source">${activity.sourceName}</span>` : ''}
                                                </div>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        `).join('');
                        
                        container.innerHTML = activitiesHTML;
                    } else {
                        const noActivityEl = document.getElementById('noActivityMessage');
                        if (noActivityEl) {
                            noActivityEl.style.display = 'block';
                        }
                        container.innerHTML = '';
                    }
                })
                .catch(error => {
                    console.error('Error loading user activity:', error);
                    container.innerHTML = `
                        <div class="error-state">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h4>Failed to Load Activity</h4>
                            <p>There was an error loading the activity. Please try again.</p>
                            <button onclick="loadUserActivity()" class="btn btn-primary">Retry</button>
                        </div>
                    `;
                });
            } catch (error) {
                console.error('Error loading user activity:', error);
                container.innerHTML = '<div class="empty-state"><i class="fas fa-chart-line"></i><h3>Activity unavailable</h3></div>';
            }
        }

        function setupFollowHandler() {
            const followButton = document.querySelector('.btn-follow');
            if (followButton && window.followStatusManager) {
                followButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const username = this.dataset.username || '@Model.UserProfile?.Username' || 'User';
                    if (!this.dataset.username) {
                        this.dataset.username = username;
                    }
                    
                    // Use the original handler without modification
                    window.followStatusManager.handleFollowClick(this);
                });
            }
        }
        
        async function refreshUserStats() {
            try {
                const profileUserId = window.profileContext?.profileUserId || '@(Model.UserProfile?.UserID ?? 0)';
                // Use a more direct API endpoint for user stats
                const apiUrl = window.ApiConfig.getApiUrl(`/api/User/${profileUserId}/stats`);
                
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Update followers count - use simpler selector
                    const followersCount = document.querySelector('.profile-stats .stat-item:first-child .stat-number');
                    if (followersCount && data.followersCount !== undefined) {
                        followersCount.textContent = data.followersCount;
                    }
                    
                    // Update following count - use simpler selector
                    const followingCount = document.querySelector('.profile-stats .stat-item:last-child .stat-number');
                    if (followingCount && data.followingCount !== undefined) {
                        followingCount.textContent = data.followingCount;
                    }
                } else {
                    console.log('Stats endpoint not available');
                }
            } catch (error) {
                console.error('Error refreshing user stats:', error);
            }
        }
        
        function setupAvatarUpload() {
            const avatarClickable = document.querySelector('.avatar-clickable');
            const avatarInput = document.getElementById('avatarInput');
            
            if (!avatarClickable || !avatarInput) return;
            
            // Make avatar clickable
            avatarClickable.addEventListener('click', function() {
                avatarInput.click();
            });
            
            // Handle file selection
            avatarInput.addEventListener('change', async function(e) {
                const file = e.target.files[0];
                if (!file) return;

                // Validate file type
                if (!file.type.startsWith('image/')) {
                    showToast('Please select an image file', 'error');
                    return;
                }

                // Validate file size (5MB max)
                if (file.size > 5 * 1024 * 1024) {
                    showToast('File size must be less than 5MB', 'error');
                    return;
                }

                const formData = new FormData();
                formData.append('file', file);

                try {
                    showToast('Uploading profile picture...', 'info');
                    
                    const response = await fetch(window.ApiConfig.getApiUrl('/api/User/UploadProfilePic'), {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + (localStorage.getItem('jwtToken') || getCookie('jwtToken'))
                        },
                        body: formData
                    });

                    const result = await response.json();
                    if (response.ok && result.success) {
                        showToast('Profile picture updated successfully!', 'success');
                        
                        // Update the avatar display
                        const avatarContainer = document.querySelector('.avatar-clickable');
                        if (avatarContainer) {
                            avatarContainer.innerHTML = `
                                <img src="${result.imageUrl}" alt="${window.profileContext.username}" class="avatar-circle profile-image" />
                                <div class="avatar-overlay">
                                    <i class="fas fa-camera"></i>
                                    <span>Change Photo</span>
                                </div>
                            `;
                        }
                        
                        // Refresh the page after a short delay to update header avatar
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                        
                    } else {
                        showToast(result.message || 'Failed to upload profile picture', 'error');
                    }
                } catch (error) {
                    console.error('Avatar upload error:', error);
                    showToast('Network error occurred', 'error');
                }
            });
        }
        
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.textContent = message;
            
            const toastContainer = document.querySelector('.toast-container') || createToastContainer();
            toastContainer.appendChild(toast);
            
            setTimeout(() => toast.classList.add('show'), 100);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.className = 'toast-container';
            container.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
            `;
            document.body.appendChild(container);
            return container;
        }
        
        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
    </script>
}

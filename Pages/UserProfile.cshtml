@page "/userprofile/{userId:int?}"
@model NewsSite.Pages.UserProfileModel
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = $"{Model.UserProfile?.Username ?? "User"}'s Profile";
    ViewData["HeaderData"] = Model.HeaderData;
}

@{
    // Include unified post template system
    await Html.RenderPartialAsync("_PostTemplatePartial");
}

@if (ViewData["ErrorMessage"] != null)
{
    <div class="container mt-4">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">
                <i class="fas fa-exclamation-triangle"></i>
                Error
            </h4>
            <p>@ViewData["ErrorMessage"]</p>
            @if (ViewData["ExceptionMessage"] != null)
            {
                <hr>
                <p class="mb-0 small text-muted">
                    <strong>Technical details:</strong> @ViewData["ExceptionMessage"]
                </p>
            }
            <hr>
            <div class="d-flex gap-2">
                <a href="~/" class="btn btn-primary">
                    <i class="fas fa-home"></i> Go Home
                </a>
                <button onclick="window.history.back()" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Go Back
                </button>
            </div>
        </div>
    </div>
}
else
{

<div class="user-profile-container">
    <div class="profile-header">
        <div class="user-avatar">
            @if (!string.IsNullOrEmpty(Model.UserProfile?.ProfilePicture))
            {
                <img src="@Model.UserProfile.ProfilePicture" alt="@Model.UserProfile.Username" class="avatar-circle profile-image" />
            }
            else
            {
                <div class="avatar-circle">
                    @(Model.UserProfile?.Username?.Substring(0,1).ToUpper() ?? "?")
                </div>
            }
        </div>
        <div class="user-info">
            <h1 class="username">@Model.UserProfile?.Username</h1>
            @if (!string.IsNullOrEmpty(Model.UserProfile?.Bio)) {
                <p class="user-bio">@Model.UserProfile.Bio</p>
            }
            <p class="join-date">
                <i class="fas fa-calendar-alt"></i> Joined @Model.UserProfile?.JoinDate.ToString("MMMM dd, yyyy")
            </p>
            @if (Model.UserProfile?.IsAdmin == true) {
                <span class="admin-badge"><i class="fas fa-user-shield"></i> Admin</span>
            }
            @if (!Model.IsOwnProfile) {
                <div class="profile-actions">
                    <button class="btn btn-outline-primary btn-follow" data-user-id="@Model.UserProfile?.UserID" data-following="@Model.IsFollowing.ToString().ToLower()" data-username="@(Model.UserProfile?.Username ?? "User")">
                        <i class="fas @(Model.IsFollowing ? "fa-user-minus" : "fa-user-plus")"></i>
                        @(Model.IsFollowing ? " Unfollow" : " Follow")
                    </button>
                    <button class="btn btn-outline-danger btn-block-user" data-user-id="@Model.UserProfile?.UserID" data-username="@(Model.UserProfile?.Username ?? "User")">
                        <i class="fas fa-user-slash"></i> Block
                    </button>
                </div>
            }
        </div>
    </div>
    <div class="profile-stats">
        <div class="stat-item">
            <span class="stat-number">@(Model.UserProfile?.Activity?.LikesCount ?? 0)</span>
            <span class="stat-label">Likes Given</span>
        </div>
        <div class="stat-item">
            <span class="stat-number">@(Model.UserProfile?.Activity?.SavedCount ?? 0)</span>
            <span class="stat-label">Saved Articles</span>
        </div>
        <div class="stat-item stat-clickable" data-stat="followers" style="cursor: pointer;">
            <span class="stat-number">@(Model.UserProfile?.Activity?.FollowersCount ?? 0)</span>
            <span class="stat-label">Followers</span>
        </div>
        <div class="stat-item stat-clickable" data-stat="following" style="cursor: pointer;">
            <span class="stat-number">@(Model.UserProfile?.Activity?.FollowingCount ?? 0)</span>
            <span class="stat-label">Following</span>
        </div>
    </div>

    <div class="profile-content">
        <div class="content-tabs">
            <button class="tab-btn active" data-tab="posts">
                <i class="fas fa-newspaper"></i> My Posts
            </button>
            @if (Model.IsOwnProfile)
            {
                <button class="tab-btn" data-tab="liked">
                    <i class="fas fa-heart"></i> Liked Posts
                </button>
                <button class="tab-btn" data-tab="saved">
                    <i class="fas fa-bookmark"></i> Saved Posts
                </button>
            }
            <button class="tab-btn" data-tab="activity">
                <i class="fas fa-chart-line"></i> Activity
            </button>
            @if (Model.IsOwnProfile)
            {
                <button class="tab-btn" data-tab="blocked">
                    <i class="fas fa-user-slash"></i> Blocked Users
                </button>
            }
        </div>

        <!-- My Posts Tab -->
        <div class="tab-content active" id="posts-tab">
            <div class="user-posts" id="userPostsContainer">
                <!-- Posts will be loaded dynamically using unified template -->
            </div>
        </div>
        @if (Model.IsOwnProfile)
        {
            <div class="tab-content" id="blocked-tab">
                <div id="blockedUsersContainer" class="blocked-users-container">
                    <!-- Blocked users will be loaded here -->
                </div>
                <div id="noBlockedMessage" class="no-activity-message" style="display: none;">
                    <i class="fas fa-user-slash"></i>
                    <h4>No Blocked Users</h4>
                    <p>You have not blocked any users.</p>
                </div>
            </div>
        }

        <!-- Liked Posts Tab (Only for own profile) -->
        @if (Model.IsOwnProfile)
        {
            <div class="tab-content" id="liked-tab">
                <div class="loading-placeholder" id="liked-loading">
                    <i class="fas fa-spinner fa-spin"></i> Loading liked posts...
                </div>
                <div class="user-posts" id="liked-posts-container"></div>
            </div>

            <!-- Saved Posts Tab (Only for own profile) -->
            <div class="tab-content" id="saved-tab">
                <div class="loading-placeholder" id="saved-loading">
                    <i class="fas fa-spinner fa-spin"></i> Loading saved posts...
                </div>
                <div class="user-posts" id="saved-posts-container"></div>
            </div>
        }

        <div class="tab-content" id="activity-tab">
            <div class="activity-overview">
                <h3>Activity Overview</h3>
                <div class="activity-grid">
                    <div class="activity-card">
                        <i class="fas fa-edit"></i>
                        <div>
                            <h4>Articles Published</h4>
                            <p>@Model.UserProfile?.Activity?.PostsCount total articles</p>
                        </div>
                    </div>
                    <div class="activity-card">
                        <i class="fas fa-thumbs-up"></i>
                        <div>
                            <h4>Engagement</h4>
                            <p>@Model.UserProfile?.Activity?.LikesCount likes given to other posts</p>
                        </div>
                    </div>
                    <div class="activity-card">
                        <i class="fas fa-bookmark"></i>
                        <div>
                            <h4>Curated Content</h4>
                            <p>@Model.UserProfile?.Activity?.SavedCount articles saved for later</p>
                        </div>
                    </div>
                    <div class="activity-card">
                        <i class="fas fa-users"></i>
                        <div>
                            <h4>Community</h4>
                            <p>@Model.UserProfile?.Activity?.FollowersCount followers</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Activity Section -->
            <div class="recent-activity-section">
                <h3>Recent Activity</h3>
                <p class="activity-description">
                    @if (Model.IsOwnProfile)
                    {
                        @:Your recent interactions with articles (likes and comments)
                    }
                    else
                    {
                        @:@Model.UserProfile?.Username's recent interactions with articles (likes and comments)
                    }
                </p>
                
                <div id="recentActivityContainer" class="recent-activity-container">
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin"></i> Loading recent activity...
                    </div>
                </div>

                <div id="noActivityMessage" class="no-activity-message" style="display: none;">
                    <i class="fas fa-chart-line"></i>
                    <h4>No Recent Activity</h4>
                    <p>Start engaging with articles by liking and commenting to see your activity here.</p>
                </div>
            </div>
        </div>
    </div>
</div>

}

<!-- Followers Modal -->
<div class="modal fade" id="followersModal" tabindex="-1" aria-labelledby="followersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="followersModalLabel">Followers</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="followersContainer" class="users-list-container">
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin"></i> Loading followers...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Following Modal -->
<div class="modal fade" id="followingModal" tabindex="-1" aria-labelledby="followingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="followingModalLabel">Following</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="followingContainer" class="users-list-container">
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin"></i> Loading following...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include required CSS -->
<link rel="stylesheet" href="~/css/userprofile.css" />

@section Scripts {
    <!-- Required JS files are already included in _Layout.cshtml -->
    <script src="~/js/userprofile.js"></script>
    <script src="~/js/post-interactions.js"></script>
    
    <script>
        // Initialize user profile functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Set up profile context for other scripts
            window.profileContext = {
                currentUserId: '@(Model.HeaderData?.user?.Id ?? 0)',
                profileUserId: '@(Model.UserProfile?.UserID ?? 0)',
                isOwnProfile: @Model.IsOwnProfile.ToString().ToLower(),
                username: '@(Model.UserProfile?.Username ?? "")'
            };
            
            // Initialize unified post template system if available
            if (window.postTemplateHelpers && window.profileContext.currentUserId !== '0') {
                window.postTemplateHelpers.setCurrentUser(window.profileContext.currentUserId);
            }
            
            // Set up tab switching
            initializeTabs();
            
            // Load initial posts
            loadUserPosts();
            
            // Set up follow functionality if available
            if (window.followStatusManager) {
                setupFollowHandler();
            }
            
            // Set up stats click handlers for followers/following
            setupStatsClickHandlers();
        });

        function setupStatsClickHandlers() {
            document.querySelectorAll('.stat-clickable').forEach(statElement => {
                statElement.addEventListener('click', function() {
                    const statType = this.dataset.stat;
                    const profileUserId = window.profileContext?.profileUserId || '@(Model.UserProfile?.UserID ?? 0)';
                    
                    if (statType === 'followers') {
                        showFollowersModal(profileUserId);
                    } else if (statType === 'following') {
                        showFollowingModal(profileUserId);
                    }
                });
            });
        }
        
        async function showFollowersModal(userId) {
            const modal = new bootstrap.Modal(document.getElementById('followersModal'));
            const container = document.getElementById('followersContainer');
            
            modal.show();
            container.innerHTML = '<div class="loading-placeholder"><i class="fas fa-spinner fa-spin"></i> Loading followers...</div>';
            
            try {
                const apiUrl = window.ApiConfig.getApiUrl(`/UserProfile?handler=GetFollowers&userId=${userId}`);
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (result.success && result.followers && result.followers.length > 0) {
                    const followersHTML = result.followers.map(user => `
                        <div class="user-item">
                            ${user.profilePicture ? 
                                `<img src="${user.profilePicture}" alt="${user.username}" class="user-avatar-small profile-image" />` :
                                `<div class="user-avatar-small">
                                    ${user.username ? user.username.charAt(0).toUpperCase() : '?'}
                                </div>`
                            }
                            <div class="user-info-small">
                                <div class="user-name">${user.username || 'Unknown User'}</div>
                                ${user.bio ? `<div class="user-bio-small">${user.bio}</div>` : ''}
                            </div>
                            <div class="user-actions">
                                <a href="/UserProfile/${user.userId}" class="btn btn-outline-primary btn-sm">View Profile</a>
                                ${!window.profileContext?.isOwnProfile && user.userId !== parseInt(window.profileContext?.currentUserId) ? 
                                    `<button class="btn btn-outline-primary btn-follow-small btn-follow" data-user-id="${user.userId}" data-username="${user.username}">
                                        <i class="fas fa-user-plus"></i> Follow
                                    </button>` : ''}
                            </div>
                        </div>
                    `).join('');
                    
                    container.innerHTML = followersHTML;
                } else {
                    container.innerHTML = `
                        <div class="empty-state text-center py-4">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5>No Followers Yet</h5>
                            <p class="text-muted">This user doesn't have any followers yet.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading followers:', error);
                container.innerHTML = `
                    <div class="error-state text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-2x text-danger mb-3"></i>
                        <h5>Failed to Load Followers</h5>
                        <p class="text-muted">There was an error loading the followers list.</p>
                        <button onclick="showFollowersModal(${userId})" class="btn btn-primary">Try Again</button>
                    </div>
                `;
            }
        }
        
        async function showFollowingModal(userId) {
            const modal = new bootstrap.Modal(document.getElementById('followingModal'));
            const container = document.getElementById('followingContainer');
            
            modal.show();
            container.innerHTML = '<div class="loading-placeholder"><i class="fas fa-spinner fa-spin"></i> Loading following...</div>';
            
            try {
                const apiUrl = window.ApiConfig.getApiUrl(`/UserProfile?handler=GetFollowing&userId=${userId}`);
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (result.success && result.following && result.following.length > 0) {
                    const followingHTML = result.following.map(user => `
                        <div class="user-item">
                            ${user.profilePicture ? 
                                `<img src="${user.profilePicture}" alt="${user.username}" class="user-avatar-small profile-image" />` :
                                `<div class="user-avatar-small">
                                    ${user.username ? user.username.charAt(0).toUpperCase() : '?'}
                                </div>`
                            }
                            <div class="user-info-small">
                                <div class="user-name">${user.username || 'Unknown User'}</div>
                                ${user.bio ? `<div class="user-bio-small">${user.bio}</div>` : ''}
                            </div>
                            <div class="user-actions">
                                <a href="/UserProfile/${user.userId}" class="btn btn-outline-primary btn-sm">View Profile</a>
                                ${!window.profileContext?.isOwnProfile && user.userId !== parseInt(window.profileContext?.currentUserId) ? 
                                    `<button class="btn btn-outline-primary btn-follow-small btn-follow" data-user-id="${user.userId}" data-username="${user.username}">
                                        <i class="fas fa-user-plus"></i> Follow
                                    </button>` : ''}
                            </div>
                        </div>
                    `).join('');
                    
                    container.innerHTML = followingHTML;
                } else {
                    container.innerHTML = `
                        <div class="empty-state text-center py-4">
                            <i class="fas fa-user-friends fa-3x text-muted mb-3"></i>
                            <h5>Not Following Anyone</h5>
                            <p class="text-muted">This user isn't following anyone yet.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading following:', error);
                container.innerHTML = `
                    <div class="error-state text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-2x text-danger mb-3"></i>
                        <h5>Failed to Load Following</h5>
                        <p class="text-muted">There was an error loading the following list.</p>
                        <button onclick="showFollowingModal(${userId})" class="btn btn-primary">Try Again</button>
                    </div>
                `;
            }
        }

        function initializeTabs() {
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const targetTab = this.dataset.tab;
                    
                    // Update active states
                    tabBtns.forEach(b => b.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));
                    this.classList.add('active');
                    document.getElementById(targetTab + '-tab').classList.add('active');
                    
                    // Load content for specific tabs
                    switch(targetTab) {
                        case 'liked':
                            loadLikedPosts();
                            break;
                        case 'saved':
                            loadSavedPosts();
                            break;
                        case 'posts':
                            loadUserPosts();
                            break;
                        case 'activity':
                            loadUserActivity();
                            break;
                        case 'blocked':
                            if (window.profileContext.isOwnProfile) {
                                loadBlockedUsers();
                            }
                            break;
                    }
                });
            });
        }

        // Load user posts using API config
        async function loadUserPosts() {
            const container = document.getElementById('userPostsContainer');
            if (!container) return;
            
            const profileUserId = window.profileContext?.profileUserId || '@(Model.UserProfile?.UserID ?? 0)';
            
            try {
                container.innerHTML = '<div class="posts-loading">Loading posts...</div>';
                
                const apiUrl = window.ApiConfig.getApiUrl(`/api/User/${profileUserId}/posts`);
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + (localStorage.getItem('jwtToken') || '')
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    if (data && data.length > 0) {
                        // Use unified template if available, otherwise fallback to basic rendering
                        if (window.postTemplateHelpers) {
                            const context = window.profileContext?.isOwnProfile ? 'ownProfile' : 'profile';
                            const options = {
                                isOwnPost: window.profileContext?.isOwnProfile,
                                isProfileView: true
                            };
                            
                            const formattedPosts = data.map(post => ({
                                articleID: post.ArticleID || post.articleID,
                                title: post.Title || post.title,
                                content: post.Content || post.content,
                                category: post.Category || post.category,
                                publishDate: post.PublishDate || post.publishDate,
                                imageURL: post.ImageURL || post.imageURL,
                                sourceURL: post.SourceURL || post.sourceURL,
                                sourceName: post.SourceName || post.sourceName,
                                likes: post.LikesCount || post.likes || 0,
                                views: post.ViewsCount || post.views || 0,
                                comments: post.CommentsCount || post.comments || 0,
                                user: {
                                    username: window.profileContext?.username || '@Model.UserProfile?.Username',
                                    userId: window.profileContext?.profileUserId
                                }
                            }));
                            
                            window.postTemplateHelpers.renderPosts(formattedPosts, 'userPostsContainer', context, options);
                        } else {
                            // Fallback basic rendering
                            container.innerHTML = data.map(post => `
                                <div class="post-card">
                                    <h3>${post.Title || post.title}</h3>
                                    <p>${(post.Content || post.content).substring(0, 200)}...</p>
                                    <small>by ${window.profileContext?.username || '@Model.UserProfile?.Username'}</small>
                                </div>
                            `).join('');
                        }
                    } else {
                        container.innerHTML = `
                            <div class="empty-state">
                                <i class="fas fa-file-alt"></i>
                                <h4>No Posts Yet</h4>
                                <p>${window.profileContext?.isOwnProfile ? "You haven't" : window.profileContext?.username + " hasn't"} posted anything yet.</p>
                                ${window.profileContext?.isOwnProfile ? '<a href="/Post" class="btn btn-primary"><i class="fas fa-plus"></i> Create Your First Post</a>' : ''}
                            </div>
                        `;
                    }
                } else {
                    throw new Error('Failed to load posts');
                }
            } catch (error) {
                console.error('Error loading user posts:', error);
                container.innerHTML = `
                    <div class="error-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h4>Failed to Load Posts</h4>
                        <p>There was an error loading the posts. Please try again.</p>
                        <button onclick="loadUserPosts()" class="btn btn-primary">Retry</button>
                    </div>
                `;
            }
        }

        // Placeholder functions for other tabs - implement as needed
        function loadLikedPosts() {
            const container = document.getElementById('liked-posts-container');
            if (container) {
                container.innerHTML = '<div class="empty-state"><i class="fas fa-heart"></i><h3>Liked posts feature coming soon</h3></div>';
            }
        }

        function loadSavedPosts() {
            const container = document.getElementById('saved-posts-container');
            if (container) {
                container.innerHTML = '<div class="empty-state"><i class="fas fa-bookmark"></i><h3>Saved posts feature coming soon</h3></div>';
            }
        }

        function loadUserActivity() {
            const container = document.getElementById('recentActivityContainer');
            if (!container) return;
            
            const profileUserId = window.profileContext?.profileUserId || '@(Model.UserProfile?.UserID ?? 0)';
            
            try {
                container.innerHTML = '<div class="loading-placeholder"><i class="fas fa-spinner fa-spin"></i> Loading recent activity...</div>';
                
                const apiUrl = window.ApiConfig.getApiUrl(`/UserProfile?handler=GetUserActivity&userId=${profileUserId}`);
                fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.activities && data.activities.length > 0) {
                        const activitiesHTML = data.activities.map(activity => `
                            <div class="activity-item">
                                <div class="activity-icon">
                                    <i class="fas ${activity.activityType === 'like' ? 'fa-heart' : 'fa-comment'}"></i>
                                </div>
                                <div class="activity-content">
                                    <div class="activity-header">
                                        <span class="activity-action">
                                            ${activity.activityType === 'like' ? 'Liked' : 'Commented on'} an article
                                        </span>
                                        <span class="activity-date">${new Date(activity.activityDate).toLocaleDateString()}</span>
                                    </div>
                                    <div class="activity-article">
                                        <a href="/Post/${activity.articleID}" class="activity-article-link">
                                            ${activity.imageURL ? `<div class="activity-article-image"><img src="${activity.imageURL}" alt="Article image"></div>` : ''}
                                            <div class="activity-article-info">
                                                <h4 class="activity-article-title">${activity.title}</h4>
                                                <div class="activity-article-meta">
                                                    <span class="activity-category">${activity.category}</span>
                                                    ${activity.sourceName ? `<span class="activity-source">${activity.sourceName}</span>` : ''}
                                                </div>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        `).join('');
                        
                        container.innerHTML = activitiesHTML;
                    } else {
                        const noActivityEl = document.getElementById('noActivityMessage');
                        if (noActivityEl) {
                            noActivityEl.style.display = 'block';
                        }
                        container.innerHTML = '';
                    }
                })
                .catch(error => {
                    console.error('Error loading user activity:', error);
                    container.innerHTML = `
                        <div class="error-state">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h4>Failed to Load Activity</h4>
                            <p>There was an error loading the activity. Please try again.</p>
                            <button onclick="loadUserActivity()" class="btn btn-primary">Retry</button>
                        </div>
                    `;
                });
            } catch (error) {
                console.error('Error loading user activity:', error);
                container.innerHTML = '<div class="empty-state"><i class="fas fa-chart-line"></i><h3>Activity unavailable</h3></div>';
            }
        }

        function setupFollowHandler() {
            const followButton = document.querySelector('.btn-follow');
            if (followButton && window.followStatusManager) {
                followButton.addEventListener('click', function() {
                    const username = this.dataset.username || '@Model.UserProfile?.Username' || 'User';
                    if (!this.dataset.username) {
                        this.dataset.username = username;
                    }
                    
                    // Add callback to refresh stats after follow action
                    const originalHandler = window.followStatusManager.handleFollowClick.bind(window.followStatusManager);
                    window.followStatusManager.handleFollowClick = async function(button) {
                        await originalHandler(button);
                        // Refresh stats after follow action
                        await refreshUserStats();
                    };
                    
                    window.followStatusManager.handleFollowClick(this);
                });
            }
            
            // Set up block/unblock functionality
            const blockButton = document.querySelector('.btn-block-user');
            if (blockButton) {
                blockButton.addEventListener('click', function() {
                    const userId = this.dataset.userId;
                    const username = this.dataset.username || '@Model.UserProfile?.Username' || 'User';
                    handleBlockUser(userId, username, this);
                });
            }
        }
        
        async function refreshUserStats() {
            try {
                const profileUserId = window.profileContext?.profileUserId || '@(Model.UserProfile?.UserID ?? 0)';
                const apiUrl = window.ApiConfig.getApiUrl(`/api/User/${profileUserId}/stats`);
                
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Update followers count
                    const followersCount = document.querySelector('[data-stat="followers"] .stat-number');
                    if (followersCount && data.followersCount !== undefined) {
                        followersCount.textContent = data.followersCount;
                    }
                    
                    // Update following count  
                    const followingCount = document.querySelector('[data-stat="following"] .stat-number');
                    if (followingCount && data.followingCount !== undefined) {
                        followingCount.textContent = data.followingCount;
                    }
                }
            } catch (error) {
                console.error('Error refreshing user stats:', error);
            }
        }
        
        async function handleBlockUser(userId, username, button) {
            if (!userId) {
                console.error('No user ID found for block action');
                return;
            }
            
            const isCurrentlyBlocked = button.classList.contains('btn-danger');
            const action = isCurrentlyBlocked ? 'unblock' : 'block';
            const confirmMessage = isCurrentlyBlocked 
                ? `Are you sure you want to unblock ${username}?`
                : `Are you sure you want to block ${username}? This will prevent them from interacting with your content.`;
            
            if (!confirm(confirmMessage)) {
                return;
            }
            
            const originalContent = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
            
            try {
                const apiUrl = window.ApiConfig.getApiUrl(`/api/UserBlock/${action}/${userId}`);
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + (localStorage.getItem('jwtToken') || '')
                    }
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    // Update button appearance
                    if (action === 'block') {
                        button.classList.remove('btn-outline-danger');
                        button.classList.add('btn-danger');
                        button.innerHTML = '<i class="fas fa-user-check"></i> Unblock';
                        showMessage(`Successfully blocked ${username}`, 'success');
                    } else {
                        button.classList.remove('btn-danger');
                        button.classList.add('btn-outline-danger');
                        button.innerHTML = '<i class="fas fa-user-slash"></i> Block';
                        showMessage(`Successfully unblocked ${username}`, 'success');
                    }
                } else {
                    showMessage(result.message || `Failed to ${action} user`, 'error');
                    button.innerHTML = originalContent;
                }
            } catch (error) {
                console.error('Error blocking/unblocking user:', error);
                showMessage(`Failed to ${action} user`, 'error');
                button.innerHTML = originalContent;
            } finally {
                button.disabled = false;
            }
        }
        
        function showMessage(message, type = 'info') {
            // Check if we have a message container
            let messageContainer = document.getElementById('message-container');
            if (!messageContainer) {
                // Create one if it doesn't exist
                messageContainer = document.createElement('div');
                messageContainer.id = 'message-container';
                messageContainer.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    max-width: 300px;
                `;
                document.body.appendChild(messageContainer);
            }

            // Create message element
            const messageElement = document.createElement('div');
            messageElement.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show`;
            messageElement.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            messageContainer.appendChild(messageElement);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (messageElement.parentNode) {
                    messageElement.remove();
                }
            }, 5000);
        }
    </script>
}
